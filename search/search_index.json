{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web3 Pi","text":"<p>Web3 Pi provides simple, step-by-step instructions to build your own Ethereum node using Raspberry Pi 4 products. Set up your node on these low-power, small form factor devices for faster and easier access to the Ethereum blockchain.</p> <p>Start your setup now</p> <p>The main goal of this project is to provide a lightweight image creation suite that can be used to deploy Ethereum nodes on various devices from the Raspberry Pi family, including:</p> <ul> <li>Raspberry Pi 5 with 8GB of RAM</li> <li>Raspberry Pi 4 with 8GB of RAM</li> <li>Raspberry Pi Compute Mode (CM 4) with 8GB of RAM</li> </ul>"},{"location":"#why-raspberry-pi","title":"Why Raspberry Pi","text":"<p>Raspberry Pi devices are a great choice for running an Ethereum Full/Archive/Staking node.</p> <ul> <li>Affordable: you can run a Full Ethereum EL / Ethereum CL nodes for less than $350</li> <li>Efficient: resources are focused on 1 task: run the node</li> <li>Low power consumption. An ARM64 board consumes ~10W</li> <li>Small form factor: Great for running at home as it fits in any corner</li> <li>Great for running 24/7: Small, affordable and low power consumption</li> </ul>"},{"location":"#why-web3-pi-images","title":"Why Web3 Pi Images","text":"<ul> <li>Plug&amp;Play image, just flash &amp; power up</li> <li>Based on Ubuntu 24.04 LTS for ARM64</li> <li>Automatic configuration (network, user account, etc)</li> <li>Automatic USB disk partitioning and formatting</li> <li>Manages and configures swap memory in order to avoid memory problems</li> <li>Automatically starts Ethereum 1.0 sync (Geth)</li> <li>Includes an APT repository for installing and upgrading Ethereum software</li> <li>Includes monitoring dashboards based on Grafana / InfluxDB</li> <li>Includes UFW firewall</li> </ul> <p>Start your setup now</p>"},{"location":"downloads/","title":"Downloads","text":"<p>Latest images for single Raspberry Pi: https://github.com/Web3-Pi/Ethereum-On-Raspberry-Pi/releases/latest</p>"},{"location":"downloads/#single-device-mode","title":"Single-Device Mode","text":"<p>Web3Pi_Single_Device.img.xz</p>"},{"location":"downloads/#dual-devices-mode","title":"Dual-Devices Mode","text":""},{"location":"downloads/#execution-client-image","title":"Execution client image","text":"<p>Web3Pi_Dual_Devices_Execution.img.xz</p>"},{"location":"downloads/#consensus-client-image","title":"Consensus client image","text":"<p>Web3Pi_Dual_Devices_Consensus.img.xz</p>"},{"location":"info/","title":"Info","text":"<p>This cheat sheet provides a collection of useful information and key details related to the Web3 Pi project and the applications included within it. It serves as a quick reference guide for users, offering practical tips and commands to help you navigate and make the most of the Web3 Pi ecosystem. Whether you're managing clients, configuring settings, or troubleshooting, this document will streamline your workflow.</p>"},{"location":"info/#internet-connection","title":"Internet connection","text":"<p>To achieve optimal synchronization performance, your internet connection should have a download bandwidth of at least 160 Mb/s (20 MB/s).  The upload requirement, however, is significantly lower. The synchronization process with the Ethereum mainnet requires downloading approximately 1.2 TB of data. [1.1 TB download, 25 GB upload - October 2024] So please be cautious if your internet connection is metered. A slower internet connection will still function, though the synchronization process will take longer.  While upload and download speeds are important, they are only one factor in determining the quality of your connection. Ideally, a stable connection with low latency (ping) is recommended.  For optimal performance, having a static public IP address is beneficial, but it is not strictly necessary.   </p>"},{"location":"info/#wifi-connection","title":"WiFi connection","text":"<p>The default and recommended method for connecting the Raspberry Pi in the Web3 Pi project is via a wired Ethernet connection with automatic DHCP configuration. However, you can also connect Raspberry Pi 4/5 to the internet using the built-in WiFi module. To do so, in Raspberry Pi Imager, you must provide the SSID and password for your WiFi network.</p> <p>Although using WiFi is possible, we strongly recommend using a wired connection. Over time, WiFi may lead to issues with connection stability and bandwidth performance.</p> <p>Note</p> <p>If you are using WiFi, do not connect the Ethernet cable.</p>"},{"location":"info/#default-passwords","title":"Default passwords","text":""},{"location":"info/#ssh","title":"SSH","text":"<ul> <li>Username: <code>ethereum</code> </li> <li>Password: <code>ethereum</code></li> </ul> <p>You will be required to change the password to your own upon the first login.</p>"},{"location":"info/#grafana","title":"Grafana","text":"<ul> <li>Username: <code>admin</code> </li> <li>Password: <code>admin</code></li> </ul> <p>You will be required to change the password to your own upon the first login.</p> <p>Note</p> <p>In Raspberry Pi Imager, when flashing the microSD card, you will need to set the username to <code>raspberry</code> and the password to <code>raspberry</code>. The Web3 Pi installation script uses this <code>raspberry</code> user during the installation process and then creates the <code>ethereum</code> user, subsequently removing the <code>raspberry</code> user. Therefore, although you enter <code>raspberry</code> during the Raspberry Pi Imager setup, after the installation is complete, you will log in using the <code>ethereum</code> user.</p>"},{"location":"info/#default-ports","title":"Default ports","text":""},{"location":"info/#geth","title":"Geth","text":"<ul> <li>30303 (TCP/UDP) for peer-to-peer (P2P) communication.</li> <li>8545 (TCP) for the JSON-RPC server (HTTP).</li> <li>8546 (TCP) for the WebSocket server.</li> <li>8551 (TCP) for Engine API, enabling communication between the execution and consensus layers.</li> </ul>"},{"location":"info/#nimbus","title":"Nimbus","text":"<ul> <li>9000 (TCP/UDP) for peer-to-peer (P2P) communication.</li> </ul>"},{"location":"info/#lighthouse","title":"Lighthouse","text":"<ul> <li>9000 (TCP/UDP) for peer-to-peer (P2P) communication.</li> <li>5052 (TCP) for the HTTP REST API.</li> </ul>"},{"location":"info/#grafana_1","title":"Grafana","text":"<ul> <li>3000 (TCP) for the web interface.</li> </ul>"},{"location":"info/#ssh_1","title":"SSH","text":"<ul> <li>22 (TCP) for remote SSH login.</li> </ul>"},{"location":"info/#influxdb","title":"InfluxDB","text":"<ul> <li>8086 (TCP) for InfluxDB HTTP API</li> </ul>"},{"location":"info/#basic-status-http","title":"basic-status-http","text":"<ul> <li>80 (TCP) for basic-status-http web interface (Instalation status).</li> </ul>"},{"location":"info/#basic-system-monitor","title":"basic-system-monitor","text":"<ul> <li>7197 (TCP) for basic-system-monitor JSON system statistic file over HTTP.</li> </ul>"},{"location":"info/#avahi-daemon","title":"avahi-daemon","text":"<ul> <li>5353 (UDP) enables mDNS for local network discovery.</li> </ul>"},{"location":"info/#influxdb_1","title":"InfluxDB","text":"<p>InfluxDB stores device status measurements and serves as the data source for Grafana.</p> <p>The Influx database is fed by the 'basic-eth2-node-monitor' application, which collects data from Ethereum clients. It also receives input from the 'basic-system-monitor' application, which gathers operating system statistics and serves them as JSON over HTTP</p> <p>The Web3 Pi image uses InfluxDB version 1.8.10.</p> <p>To clear the accumulated data from the database, log in to the device via SSH and execute the following commands sequentially:</p> <pre><code>influx\nUSE ethonrpi\nDROP SERIES FROM /.*/\nexit\n</code></pre>"},{"location":"info/#nimbus_1","title":"Nimbus","text":"<p>\"Its efficiency and low resource consumption allows it to perform well on all kinds of systems: ranging from Raspberry Pi and mobile devices\" (source: https://nimbus.guide)</p> <p>Default Nimbus dir = <code>/mnt/storage/.nimbus/data/shared_mainnet_0</code> </p> <p>How to clear saved data:  <pre><code>sudo rm -r /mnt/storage/.nimbus/data/shared_mainnet_0\n</code></pre></p> <p>Startup script: <code>/home/ethereum/clients/nimbus/nimbus.sh</code></p> <p>Service name: <code>w3p_nimbus-beacon.service</code></p>"},{"location":"info/#geth_1","title":"Geth","text":"<p>Geth (Go Ethereum) is one of the most widely used Ethereum execution clients, written in Go.  Its efficient resource usage makes it a great option for running a full Ethereum node on constrained hardware while still maintaining full network functionality.</p> <p>Default Geth dir = <code>/mnt/storage/.ethereum</code> </p> <p>How to clear saved data:  <pre><code>sudo rm -r /mnt/storage/.ethereum\n</code></pre></p> <p>Startup script: <code>/home/ethereum/clients/geth/geth.sh</code></p> <p>Service name: <code>w3p_geth.service</code></p>"},{"location":"info/#lighthouse_1","title":"Lighthouse","text":"<p>Lighthouse is one of the most popular consensus clients and can be used as an alternative to Nimbus, the default consensus client in Web3 Pi. However, make sure not to run both clients at the same time.</p> <p>Default Lighthouse dir = <code>/mnt/storage/.lighthouse</code> </p> <p>How to clear saved data:  <pre><code>sudo rm -r /mnt/storage/.lighthouse\n</code></pre></p> <p>Startup script: <code>/home/ethereum/clients/lighthouse/lighthouse.sh</code></p> <p>Service name: <code>w3p_lighthouse-beacon.service</code></p>"},{"location":"info/#jwt-secret","title":"JWT Secret","text":"<p>The jwt.hex file is generated by the installation script and stored in the directory <code>/home/ethereum/clients/secrets/jwt.hex</code>. This file is crucial for enabling authenticated communication between the execution and consensus clients, ensuring the integrity and security of Ethereum's client interactions.</p>"},{"location":"info/#storage","title":"Storage","text":""},{"location":"info/#pcie-generation","title":"PCIe Generation","text":"<p>PCIe Gen 2 vs. PCIe Gen 3 on Raspberry Pi 5</p> <p>By default, Raspberry Pi 5 uses PCIe Gen 2, and this is the officially supported version. However, it's possible to enable PCIe Gen 3 on Raspberry Pi 5 through a simple configuration tweak. While this is not officially supported, it typically works without issues.</p> <p>Benefits of PCIe Gen 3:</p> <ul> <li>Higher Bandwidth: PCIe Gen 3 offers double the bandwidth compared to PCIe Gen 2. This means faster data transfer rates, which can be especially beneficial for high-speed storage devices like NVMe SSDs or network cards.</li> <li>Improved Performance: For applications that are bottlenecked by PCIe bandwidth, enabling Gen 3 can significantly improve performance.</li> </ul> <p>While Raspberry Pi 5 is designed for PCIe Gen 2, upgrading to Gen 3 can unlock more potential in compatible devices.</p>"},{"location":"info/#troubleshooting","title":"Troubleshooting","text":"<p>Web3 Pi log: <code>/var/log/web3pi.log</code> </p> <p>rc.local log: <code>/root/first-run.flag</code> </p> <p>Viewing Ubuntu Linux boot log messages from the kernel:  <pre><code>sudo dmesg\n</code></pre> example: <code>sudo dmesg -T --color=always --level=err,warn  | more</code></p> <p>Show the systemd journal, which contains a record of all system messages, including those generated during the boot process. <pre><code>sudo journalctl -b\n</code></pre> The -b option is passed to the journalctl to show the boot log.</p> <p>Display last boot log when using systemd <pre><code>sudo journalctl -b -1\n</code></pre></p> <p>You can use the following linux log files as well:</p> <p><code>/var/log/dmesg</code> \u2013 Linux kernel ring buffer log file. <code>/var/log/kern.log</code> \u2013 Logs from the Linux kernel.</p>"},{"location":"info/#scripts","title":"Scripts","text":"<p>The Web3 Pi image comes with several useful scripts pre-installed. These can be found in the home directory of the <code>ethereum</code> user at <code>/home/ethereum/scripts</code>.</p> <p>Below is a description of each script and how to execute them:</p> <ul> <li> <p><code>sudo ./scripts/shutdown.sh</code>   This script gracefully shuts down the device. It first stops the services, allowing them time to finish their tasks, and then powers off the system.</p> </li> <li> <p><code>sudo ./scripts/reboot.sh</code>   This script gracefully reboots the device. It first stops the services, giving them time to complete their tasks, and then restarts the system.</p> </li> <li> <p><code>sudo ./scripts/formatMe.sh</code>   This script marks the mapped storage as \"to be formatted\" during the next installation. It\u2019s useful when reinstalling the Web3 Pi image.</p> </li> <li> <p><code>sudo ./scripts/versions.sh</code>   This script checks the versions of the currently installed applications and compares them to the latest available online. It covers applications such as Geth, Nimbus, and Lighthouse.</p> </li> <li> <p><code>sudo ./scripts/update_geth.sh</code>   This script updates the Geth application to the latest available version. It stops the service, installs the new version, and then restarts the service.</p> </li> <li> <p><code>sudo ./scripts/update_nimbus.sh</code>   This script updates the Nimbus application to the latest available version. It stops the service, installs the new version, and then restarts the service.</p> </li> </ul>"},{"location":"info/#ccze","title":"CCZE","text":"<p>From Web3 Pi image version 0.7.3, the CCZE application is installed by default. It enables automatic colorization of logs from applications like Geth, Nimbus, and others, significantly enhancing their readability.   </p> <p>Below, you\u2019ll find examples of how to use it: </p> <pre><code>sudo journalctl -xfu w3p_geth.service | ccze -A\n\nsudo journalctl -xfu w3p_nimbus-beacon.service | ccze -A\n\ncat /var/log/web3pi.log | ccze\n</code></pre>"},{"location":"Advanced/Networking/","title":"Networking","text":""},{"location":"Advanced/Networking/#default-ports-for-geth","title":"Default Ports for Geth","text":"<p>Geth (Go Ethereum) uses specific network ports for its operations, primarily for peer-to-peer (P2P) communication and the JSON-RPC API. Here are the default ports used by Geth:</p> <ol> <li> <p>P2P Communication:</p> <ul> <li>TCP/UDP Port 30303: This is the default port used by Geth for P2P network connections with other Ethereum nodes. Both TCP and UDP protocols are used on this port.</li> </ul> </li> <li> <p>JSON-RPC API:</p> <ul> <li>HTTP-RPC Port 8545: This port is used for HTTP-based JSON-RPC API calls. It allows external applications to interact with the Geth node via HTTP requests.</li> <li>WebSocket Port 8546: This port is used for WebSocket-based JSON-RPC API calls, providing a more interactive way to communicate with the Geth node.</li> </ul> </li> <li> <p>IPC (Inter-Process Communication):</p> <ul> <li>IPC Path: By default, Geth creates an IPC endpoint at a path like <code>geth.ipc</code> within the data directory. The IPC endpoint is a Unix domain socket on Linux/macOS or a named pipe on Windows.</li> </ul> </li> </ol>"},{"location":"Advanced/Networking/#example-commands-to-specify-ports","title":"Example Commands to Specify Ports","text":"<p>You can customize these ports using Geth's command-line options:</p> <ul> <li> <p>P2P Port: <pre><code>geth --port 30303\n</code></pre></p> </li> <li> <p>HTTP-RPC Port: <pre><code>geth --http --http.port 8545\n</code></pre></p> </li> <li> <p>WebSocket Port: <pre><code>geth --ws --ws.port 8546\n</code></pre></p> </li> </ul>"},{"location":"Advanced/Networking/#summary-of-default-ports","title":"Summary of Default Ports","text":"<ul> <li>P2P: TCP/UDP 30303</li> <li>HTTP-RPC: 8545</li> <li>WebSocket: 8546</li> </ul> <p>These ports are critical for the operation of Geth and should be correctly configured to ensure proper communication and functionality within the Ethereum network.</p> <p>More informations</p> <p>https://geth.ethereum.org/docs/fundamentals/command-line-options</p>"},{"location":"Advanced/Networking/#default-ports-for-lighthouse","title":"Default Ports for Lighthouse","text":"<p>Lighthouse is an Ethereum 2.0 client developed by Sigma Prime. It is used for running the Beacon Chain, which is a key component of Ethereum 2.0. Here are the default network ports used by Lighthouse:</p> <ol> <li> <p>P2P Communication:</p> <ul> <li>TCP/UDP Port 9000: This is the default port used by Lighthouse for peer-to-peer (P2P) communication with other Ethereum 2.0 nodes. Both TCP and UDP protocols can be used on this port.</li> </ul> </li> <li> <p>REST API:</p> <ul> <li>HTTP Port 5052: This port is used for the Lighthouse REST API, which provides endpoints for interacting with the Beacon Node.</li> </ul> </li> </ol>"},{"location":"Advanced/Networking/#example-commands-to-specify-ports_1","title":"Example Commands to Specify Ports","text":"<p>You can customize these ports using command-line options when starting the Lighthouse Beacon Node:</p> <ul> <li> <p>P2P Port: <pre><code>lighthouse bn --port 9000\n</code></pre></p> </li> <li> <p>REST API Port: <pre><code>lighthouse bn --http --http-address 0.0.0.0 --http-port 5052\n</code></pre></p> </li> </ul>"},{"location":"Advanced/Networking/#summary-of-default-ports_1","title":"Summary of Default Ports","text":"<ul> <li>P2P: TCP/UDP 9000</li> <li>REST API: 5052</li> </ul> <p>These ports are essential for the operation and management of a Lighthouse Beacon Node, enabling it to communicate with other nodes in the Ethereum 2.0 network and allowing users to interact with and monitor the node.</p> <p>More informations</p> <p>https://lighthouse-book.sigmaprime.io/help_bn.html?highlight=default%20ports#beacon-node</p>"},{"location":"Advanced/Networking/#default-ports-for-nimbus","title":"Default Ports for Nimbus","text":"<p>Nimbus, an Ethereum 2.0 client developed by Status, uses specific network ports for various purposes including P2P communication, the HTTP API, and metrics. Here are the default network ports used by Nimbus:</p> <ol> <li> <p>P2P Communication:</p> <ul> <li>TCP/UDP Port 9000: This is the default port used by Nimbus for peer-to-peer (P2P) communication with other Ethereum 2.0 nodes. Both TCP and UDP protocols are used on this port for Discovery v5 and other P2P activities.</li> </ul> </li> <li> <p>HTTP API:</p> <ul> <li>HTTP Port 5052: This port is used for the Nimbus HTTP API, which provides endpoints for interacting with the Beacon Node.</li> </ul> </li> </ol>"},{"location":"Advanced/Networking/#example-commands-to-specify-ports_2","title":"Example Commands to Specify Ports","text":"<p>You can customize these ports using command-line options when starting the Nimbus Beacon Node:</p> <ul> <li> <p>P2P Port: <pre><code>nimbus_beacon_node --tcp-port=9000 --udp-port=9000\n</code></pre></p> </li> <li> <p>HTTP API Port: <pre><code>nimbus_beacon_node --rest=true --rest-address=0.0.0.0 --rest-allow-origin='*' --rest-port=5052\n</code></pre></p> </li> </ul>"},{"location":"Advanced/Networking/#summary-of-default-ports_2","title":"Summary of Default Ports:","text":"<ul> <li>P2P: TCP/UDP 9000</li> <li>HTTP API: 5052</li> </ul> <p>These ports are essential for the operation and management of a Nimbus Beacon Node, enabling it to communicate with other nodes in the Ethereum 2.0 network, and allowing users to interact with and monitor the node effectively.</p> <p>More informations</p> <p>https://nimbus.guide/options.html</p>"},{"location":"Advanced/Networking/#set-up-port-forwarding","title":"Set up port forwarding","text":"<p>If you're running on a home network and want to ensure you are able to receive incoming connections you may need to set up port forwarding (If UPnP is enabled - routers automagically set this up for you).</p> <p>While the specific steps required vary based on your router, they can be summarised as follows:</p> <ol> <li>Determine your public IP address</li> <li>Determine your private IP address</li> <li>Browse to the management website for your home router (http://192.168.1.1 for most routers)</li> <li>Log in as admin</li> <li>Find the section to configure port forwarding</li> <li>Configure a port forwarding rule with the following values:<ul> <li>9000 TCP and UDP (Nimbus/Lighthouse)</li> <li>9001 UDP (Lighthouse)</li> <li>30303 TCP and UDP (Geth)</li> </ul> </li> </ol>"},{"location":"Advanced/Networking/#determine-your-public-ip-address","title":"Determine your public IP address","text":"<p>To determine your public IP address, visit http://v4.ident.me/ or run this command:</p> <pre><code>curl v4.ident.me\n</code></pre>"},{"location":"Advanced/Networking/#determine-your-private-ip-address","title":"Determine your private IP address","text":"<p>To determine your private IP address, run the appropriate command for your OS:</p> <pre><code>ip addr show | grep \"inet \" | grep -v 127.0.0.1\n</code></pre>"},{"location":"Advanced/OC/","title":"Overclocking","text":""},{"location":"Advanced/OC/#overclocking-raspberry-pi-5","title":"Overclocking Raspberry Pi 5","text":"<p>There are two things that can be tweaked at Raspberry Pi 5 to increase Ethereum Node performance.  </p> <ul> <li>CPU frequency</li> <li>PCIe generation</li> </ul> <p>Note about PCIe generation settings</p> <p>This make sens only if using PCIe to m.2 adapter for storage.</p>"},{"location":"Advanced/OC/#cpu-overclocking","title":"CPU Overclocking","text":"<p>By default, the Raspberry Pi 5 CPU clock is set to 2.4 GHz, but it is relatively easy to overclock. An overclocked CPU with a significant load will require an active cooling solution or a high-quality cooling case. </p> <p>The maximum stable clock that can be achieved depends on a particular device.</p> <p>Safe for all devices is 2.6 GHz. The reasonable top is 3.0GHz.</p> <p>Raspberry Pi has enough power to handle Ethereum node without OC so our recommendation is to keep stable settings like 2.6 GHz</p>"},{"location":"Advanced/OC/#how-to-overclock-the-cpu","title":"How to overclock the CPU","text":"<ul> <li>Edit the /boot/firmware/config.txt for editing:   <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre></li> <li>Find the last <code>[pi5]</code> section, almost at the end of the file. Look for this comment:    <pre><code> [rpi5]\n # Overclocking form Raspberry Pi 5\n # Active cooling is required\n over_voltage_delta=50000\n arm_freq=2800\n #2400MHz is default\n #3000MHz is max (not all boards will work stable)\n #2800MHz is reasonable OC\n</code></pre></li> <li>Exit the editor by pressing <code>Ctrl+x</code> and save changes</li> <li>Restart the device:   <pre><code>sudo reboot\n</code></pre></li> <li>After reboot you can check if frequency is correctly recognized by OS <pre><code>sudo cat /sys/devices/system/cpu/cpu0/cpufreq/cpuinfo_max_freq\n</code></pre></li> </ul> <p>It should output <code>2600000</code></p> <p>If the procedure is successful, the device should be up and running with the updated OC settings.</p> <p>For more information about OC Raspberry Pi 5 please visit</p> <p>https://www.jeffgeerling.com/blog/2023/overclocking-and-underclocking-raspberry-pi-5</p>"},{"location":"Advanced/OC/#pcie-generation-select","title":"PCIe generation select","text":"<p>Raspberry Pi by default use PCIe gen 2. But Broadcom BCM2712 offers PCIe generation 3 which is twice as fast. By default is set gen. 2 because of compatibility reasons with different adapters. In most cases, you can safely set gen.3, which improves the performance of NVMe drive twice.</p> <ul> <li>Edit the /boot/firmware/config.txt for editing:   <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre></li> <li>Find the last <code>[pi5]</code> section, almost at the end of the file. Look for this comment:    <pre><code> #Enable PCIe\n dtparam=pciex1\n #Enable PCIe gen.3 (default is gen.2)\n dtparam=pciex1_gen=3\n</code></pre></li> <li>Exit the editor by pressing <code>Ctrl+x</code> and save changes</li> <li>Restart the device:   <pre><code>sudo reboot\n</code></pre></li> </ul> <p>For more information please visit: https://www.jeffgeerling.com/blog/2023/nvme-ssd-boot-raspberry-pi-5</p>"},{"location":"Advanced/OC/#overclocking-raspberry-pi-4","title":"Overclocking Raspberry Pi 4","text":"<p>To overclock the Raspberry Pi 4, you need to edit the config.txt file located in the /boot/firmware/ directory.</p> <ol> <li> <p>Access the File:</p> <ul> <li>Open a terminal on your Raspberry Pi.</li> <li>Edit the <code>config.txt</code> file using a text editor such as <code>nano</code>.</li> </ul> <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre> </li> <li> <p>Add Overclocking Settings:</p> <ul> <li>Uncoment the following lines almost the end of the <code>config.txt</code> file. Adjust the values based on your desired overclock settings and the stability of your system.</li> </ul> <pre><code>[pi4]\nover_voltage=6\narm_freq=1800\ngpu_freq=600\n</code></pre> <p>Explanation:</p> <ul> <li><code>over_voltage=6</code>: Increases the core voltage. Values range from 0 to 8. Higher values increase stability but also generate more heat.</li> <li><code>arm_freq=1800</code>: Sets the CPU frequency to 1800 MHz (1.8 GHz).  <ul> <li>The default is 1500 MHz</li> <li>Moderate OC is 1800 MHz</li> <li>High Overclock is 2000 MHz</li> </ul> </li> <li><code>gpu_freq=600</code>: Sets the GPU frequency to 600 MHz.<ul> <li>The default is 500 MHz</li> <li>Moderate OC is 600 MHz</li> <li>High Overclock is 750 MHz</li> </ul> </li> </ul> </li> <li> <p>Save and Reboot:</p> <ul> <li>Save the file (<code>Ctrl+O</code> and <code>Enter</code> in nano) and exit the text editor (<code>Ctrl+X</code> in nano).</li> <li>Reboot the Raspberry Pi to apply the changes.</li> </ul> <pre><code>sudo reboot\n</code></pre> </li> </ol>"},{"location":"Advanced/OC/#overclocking-raspberry-pi-cm4","title":"Overclocking Raspberry Pi CM4","text":"<p>Overclocking the Raspberry Pi Compute Module 4 (CM4) is similar to overclocking the Raspberry Pi 4, but there are a few key differences to consider due to the form factor and intended use cases of the CM4.</p>"},{"location":"Advanced/OC/#similarities","title":"Similarities","text":"<ol> <li> <p>Configuration File:</p> <ul> <li>Both use the <code>config.txt</code> file located in the <code>/boot</code> directory for overclocking settings.</li> </ul> </li> <li> <p>Overclocking Parameters:</p> <ul> <li>Parameters such as <code>over_voltage</code>, <code>arm_freq</code>, and <code>gpu_freq</code> are used in the same way to adjust voltage, CPU frequency, and GPU frequency.</li> </ul> </li> <li> <p>Monitoring and Testing:</p> <ul> <li>Tools and methods for monitoring temperature, checking for throttling, and stress testing are the same.</li> </ul> </li> </ol>"},{"location":"Advanced/OC/#differences","title":"Differences","text":"<ol> <li> <p>Form Factor and Cooling:</p> <ul> <li>The CM4 is designed to be used with custom carrier boards, which may affect cooling solutions. Ensure your carrier board design allows for adequate cooling, especially when overclocking.</li> </ul> </li> <li> <p>Power Supply:</p> <ul> <li>The power supply and power delivery to the CM4 might be different depending on the carrier board. Ensure that the carrier board can supply sufficient power for overclocking.</li> </ul> </li> </ol>"},{"location":"Advanced/OC/#monitoring-and-stability","title":"Monitoring and Stability","text":"<ol> <li> <p>Monitor Temperatures</p> <ul> <li> <p>Use tools like <code>vcgencmd</code> to monitor the temperature of your Raspberry Pi. <pre><code>vcgencmd measure_temp\n</code></pre></p> </li> <li> <p>Ideally, temperatures should remain below 85\u00b0C. If temperatures are higher, consider improving your cooling solution.</p> </li> </ul> </li> <li> <p>Stress Test</p> <ul> <li>Run stress tests to ensure stability. The <code>stress</code> tool can be used for this purpose.</li> </ul> <pre><code>sudo apt install stress\nstress --cpu 4 --timeout 600\n</code></pre> </li> <li> <p>Check for Throttling</p> <ul> <li>Use <code>vcgencmd</code> to check if the Raspberry Pi is throttling due to high temperatures or insufficient power.</li> </ul> <pre><code>vcgencmd get_throttled\n</code></pre> <ul> <li>A result of <code>0x0</code> indicates no throttling.</li> </ul> </li> </ol>"},{"location":"Advanced/OC/#safety-tips","title":"Safety Tips","text":"<ol> <li>Incremental Changes: Start with small increments and gradually increase the values. Monitor stability and temperatures at each step.</li> <li>Cooling: Ensure you have sufficient cooling. Consider adding a fan or better heatsinks if necessary.</li> <li>Power Supply: Use a high-quality power supply that can handle the increased power demands.</li> <li>Testing: Perform extensive testing to ensure that your system remains stable under load.</li> </ol>"},{"location":"Advanced/OC/#conclusion","title":"Conclusion","text":"<p>Overclocking the Raspberry Pi 4 can provide significant performance improvements, making it more capable for Ethereum node. However, it is crucial to approach overclocking with caution, ensuring adequate cooling and power supply, and thoroughly testing for stability. By following these guidelines, you can safely and effectively overclock your Raspberry Pi to meet your performance needs.</p>"},{"location":"Advanced/UPnP/","title":"UPnP","text":"<p>By default, Geth, Lighthouse and Nimbus uses UPnP to set up port forwarding and detect your external IP address. If you do not have UPnP enabled, you may need to pass additional command-line options to the node and set up port forwarding on your router.</p> <p>Enabling UPnP is usually as simple as checking a box in your router's configuration.</p>"},{"location":"Advanced/UPnP/#upnp-universal-plug-and-play-definition","title":"UPnP (Universal Plug and Play) definition","text":"<p>Universal Plug and Play (UPnP) is a set of networking protocols that enables devices on a network to seamlessly discover each other and establish functional services for data sharing, communications, and entertainment. It allows devices to automatically join a network, obtain an IP address, and announce their capabilities to other networked devices without requiring manual configuration.</p>"},{"location":"Advanced/UPnP/#key-features","title":"Key Features","text":"<ul> <li>Automatic Discovery: Devices can discover each other automatically on a local network, eliminating the need for user intervention or manual configuration.</li> <li>Interoperability: UPnP facilitates communication between devices from different manufacturers, ensuring that a wide range of devices can work together seamlessly.</li> <li>Dynamic IP Addressing: Devices can dynamically obtain IP addresses and other network settings, simplifying the process of joining and configuring network devices.</li> <li>Service Advertisement: Devices can advertise their services (such as file sharing, media streaming, or printing) to other devices on the network, making it easy for users to access and utilize these services.</li> </ul>"},{"location":"Advanced/UPnP/#how-it-works","title":"How It Works","text":"<ul> <li>Discovery: Devices use the Simple Service Discovery Protocol (SSDP) to broadcast their presence on the network.</li> <li>Description: Devices provide a description of their capabilities using XML, which can be accessed over HTTP.</li> <li>Control: Devices communicate using standard protocols like SOAP (Simple Object Access Protocol) to control actions and access services.</li> <li>Event Notification: Devices use the General Event Notification Architecture (GENA) to send and receive updates about changes in status or availability of services.</li> </ul>"},{"location":"Advanced/UPnP/#common-use-cases","title":"Common Use Cases:","text":"<ul> <li>Home Automation: UPnP simplifies the setup and control of smart home devices like lights, thermostats, and security cameras.</li> <li>Media Streaming: Devices such as smart TVs, gaming consoles, and media servers use UPnP to stream content from one device to another.</li> <li>Network Configuration: Routers, printers, and other network devices use UPnP to facilitate easy setup and configuration without user intervention.</li> </ul>"},{"location":"Advanced/UPnP/#technical-details","title":"Technical Details:","text":"<ul> <li>Discovery Protocol: SSDP (Simple Service Discovery Protocol)</li> <li>Communication Protocols: HTTP, SOAP, XML</li> <li>Addressing: Uses IP addressing for identifying devices on the network.</li> </ul>"},{"location":"Advanced/UPnP/#security-considerations","title":"Security Considerations:","text":"<p>While UPnP provides convenience, it also has potential security vulnerabilities, such as unauthorized access to networked devices if not properly secured. Ensuring proper network security measures, such as firewalls and updated device firmware, is crucial to mitigate these risks.</p> <p>In summary, UPnP is a protocol designed to simplify the networking experience by enabling automatic discovery and interaction of devices on a local network, promoting ease of use and interoperability among various devices.</p>"},{"location":"Advanced/UPnP/#enable-upnp-on-a-router","title":"Enable UPnP on a Router","text":"<p>Enabling UPnP on a router can vary slightly depending on the router's brand and model. However, the general process is similar across most routers. Here\u2019s a step-by-step guide to enable UPnP:</p>"},{"location":"Advanced/UPnP/#steps-to-enable-upnp-on-a-router","title":"Steps to Enable UPnP on a Router","text":"<ol> <li> <p>Access the Router\u2019s Web Interface: </p> <ul> <li>Open a web browser on a device connected to your router.</li> <li>Type the router\u2019s IP address into the address bar and press Enter. Common IP addresses include <code>192.168.0.1</code>, <code>192.168.1.1</code>, or <code>192.168.1.254</code>. Check your router\u2019s manual if these do not work.</li> </ul> </li> <li> <p>Log in to the Router:</p> <ul> <li>Enter the router\u2019s username and password. The default credentials are often found on a sticker on the router or in the router\u2019s manual. Common defaults are <code>admin/admin</code> or <code>admin/password</code>.</li> </ul> </li> <li> <p>Navigate to the UPnP Settings:</p> <ul> <li>Look for a section labeled Advanced, Advanced Setup, Network Settings, NAT/QoS, or something similar. The exact label can vary by router.</li> <li>Find a submenu or tab for UPnP.</li> </ul> </li> <li> <p>Enable UPnP:</p> <ul> <li>Check the box or toggle the switch to enable UPnP.</li> <li>Some routers might offer additional UPnP settings. Adjust these according to your preference, but the default settings usually suffice for most users.</li> </ul> </li> <li> <p>Save the Settings:</p> <ul> <li>After enabling UPnP, look for a Save, Apply, or OK button to save the changes.</li> <li>The router may restart to apply the new settings.</li> </ul> </li> <li> <p>Verify the UPnP Status:</p> <ul> <li>Once the router has restarted, you can check the status page or the UPnP section to ensure UPnP is enabled and functioning correctly.</li> </ul> </li> </ol>"},{"location":"Advanced/UPnP/#example-on-common-routers","title":"Example on Common Routers:","text":""},{"location":"Advanced/UPnP/#netgear-router","title":"Netgear Router:","text":"<ol> <li>Log in to the router web interface (usually <code>http://192.168.1.1</code>).</li> <li>Go to Advanced &gt; Advanced Setup &gt; UPnP.</li> <li>Check the box to enable UPnP.</li> <li>Click Apply.</li> </ol>"},{"location":"Advanced/UPnP/#tp-link-router","title":"TP-Link Router:","text":"<ol> <li>Log in to the router web interface (usually <code>http://192.168.0.1</code>).</li> <li>Go to Advanced &gt; NAT Forwarding &gt; UPnP.</li> <li>Toggle the switch to enable UPnP.</li> <li>Click Save.</li> </ol>"},{"location":"Advanced/UPnP/#linksys-router","title":"Linksys Router:","text":"<ol> <li>Log in to the router web interface (usually <code>http://192.168.1.1</code>).</li> <li>Go to Administration &gt; Management.</li> <li>Find the UPnP section and enable it.</li> <li>Click Save Settings.</li> </ol>"},{"location":"Advanced/UPnP/#security-considerations_1","title":"Security Considerations:","text":"<ul> <li>Use UPnP with Caution: UPnP can pose security risks if not managed properly, as it allows devices to open ports on the router automatically. Ensure that you trust the devices on your network.</li> <li>Keep Firmware Updated: Regularly update your router\u2019s firmware to protect against vulnerabilities.</li> <li>Monitor Network Activity: Periodically check which devices and services are using UPnP to ensure no unauthorized devices are exploiting this feature.</li> </ul> <p>By following these steps, you should be able to enable UPnP on your router, allowing for easier device communication and service discovery within your network.</p>"},{"location":"Advanced/config_txt/","title":"Config.txt","text":"<p>The config.txt file is a configuration file used by the Raspberry Pi to set various system parameters and options before the operating system boots. This file is located on the boot partition of the SD card and is critical for hardware configuration and behavior. </p> <p>The config.txt file is a powerful tool to customize the behavior and performance of your Raspberry Pi, allowing you to tailor it to your specific needs and use cases.</p> <p>The <code>config.txt</code> file on a Raspberry Pi can include sections that allow for conditional configuration based on the model of the Raspberry Pi or other conditions. These sections help to apply specific settings only to certain models or under certain circumstances. This feature is particularly useful when the same SD card is used across different Raspberry Pi models, ensuring that each model gets the appropriate settings.</p>"},{"location":"Advanced/config_txt/#sections-in-configtxt-aka-conditional-filters","title":"Sections in <code>config.txt</code> aka. Conditional filters","text":""},{"location":"Advanced/config_txt/#all","title":"<code>[all]</code>","text":"<ul> <li>Purpose: Settings under this section are applied to all Raspberry Pi models.</li> <li>Usage: General settings that should be universally applied, regardless of the specific model.</li> </ul> <pre><code>[all]\ndisable_splash=1\ndtparam=spi=on\n</code></pre>"},{"location":"Advanced/config_txt/#pi4","title":"<code>[pi4]</code>","text":"<ul> <li>Purpose: Settings under this section are applied specifically to Raspberry Pi 4 models.</li> <li>Usage: Model-specific settings, such as those related to hardware unique to the Raspberry Pi 4.</li> </ul> <pre><code>[pi4]\narm_freq=1500\ngpu_mem=256\n</code></pre>"},{"location":"Advanced/config_txt/#cm4","title":"<code>[cm4]</code>","text":"<ul> <li>Purpose: Settings under this section are applied specifically to the Compute Module 4.</li> <li>Usage: Model-specific settings for the Compute Module 4.</li> </ul> <pre><code>[cm4]\narm_freq=1500\ngpu_mem=256\n</code></pre>"},{"location":"Advanced/config_txt/#other","title":"<code>[other]</code>","text":"<ul> <li>Purpose: This is a catch-all section for any Raspberry Pi models that don't match the specified sections.</li> <li>Usage: General fallback configurations.</li> </ul> <pre><code>[other]\narm_freq=800\ngpu_mem=64\n</code></pre>"},{"location":"Advanced/config_txt/#web3-pi-extensions","title":"Web3 Pi extensions","text":"<p>Web3 Pi extends this file by adding new section:</p>"},{"location":"Advanced/config_txt/#web3pi","title":"<code>[web3pi]</code>","text":"<ul> <li>Purpose: Settings under this section are applied to Web3 Pi software.</li> <li>Usage: Web3 Pi services settings.</li> </ul> <pre><code>[web3pi]\ngeth=true\n#nimbus_light=true\nnimbus=true\nlighthouse=false\n\n# Monitoring\ninfluxdb=true\ngrafana=true\nbsm=true\nbnm=true\n</code></pre>"},{"location":"Advanced/config_txt/#nimbus","title":"<code>[nimbus]</code>","text":"<ul> <li>Purpose: Settings under this section are applied to Nimbus software.</li> <li>Usage: Settings for Nimbus software.</li> </ul> <pre><code>[nimbus]\n# Choose how to run Nimbus by setting \"nimbus_run_mode\" to one of the below options: \n# full_sync   - before run Nimbus sync db with trusted node\n# quick_sync  - before run Numbus sync only head and backfill later\n# run         - do not sync before run Numbus. Just run Nimbus client\nnimbus-run-mode=full_sync\nnimbus-trusted-node-url=http://nimbus.web3pi.io\n</code></pre>"},{"location":"Advanced/config_txt/#conclusion","title":"Conclusion","text":"<p>By using these sections and conditional filters, you can create a versatile and adaptable <code>config.txt</code> file that automatically applies the correct settings for each Raspberry Pi model and configuration.</p>"},{"location":"Advanced/mDNS/","title":"mDSN","text":""},{"location":"Advanced/mDNS/#mdns-multicast-dns","title":"mDNS (Multicast DNS)","text":"<p>Multicast DNS (mDNS) is a protocol that allows devices on a local network to perform DNS-like operations without requiring a dedicated DNS server. It enables the resolution of hostnames to IP addresses within small networks using multicast IP address 224.0.0.251 and UDP port 5353.</p>"},{"location":"Advanced/mDNS/#key-points","title":"Key Points:","text":"<ul> <li>Local Network Name Resolution: mDNS is primarily used for resolving hostnames to IP addresses within the same local network segment, making it easier to discover devices and services without a central DNS server.</li> <li>Zero Configuration: mDNS is part of the Zeroconf (Zero Configuration Networking) suite, allowing devices to automatically configure themselves and discover other devices without manual setup.</li> <li>Multicast Communication: It uses multicast communication to send DNS queries to all devices on the local network, and the device with the matching hostname responds with its IP address.</li> <li>Compatibility: mDNS is widely implemented in consumer and enterprise devices, often seen in technologies like Apple's Bonjour, which uses mDNS for service discovery.</li> </ul>"},{"location":"Advanced/mDNS/#technical-details","title":"Technical Details:","text":"<ul> <li>Multicast Address: 224.0.0.251</li> <li>Port: UDP 5353</li> <li>Standards: Defined in RFC 6762</li> </ul> <p>In summary, mDNS provides a way for devices to discover and communicate with each other on a local network without the need for manual configuration or a central DNS server, making it an essential protocol for modern networking environments.</p>"},{"location":"Advanced/services/","title":"Managing Clients","text":""},{"location":"Advanced/services/#systemd-services","title":"Systemd Services","text":"<p>All clients use Systemd services for running. Systemd takes care of the processes and automatically restarts them in case something goes wrong. It can enable a service to automatically start it on boot as well.</p> <p>Systemd command systemctl manages all operations related to the services. The available options are as follows:</p> <ul> <li>Enable - Activate the service to start on boot</li> <li>Disable - Remove the service from boot start</li> <li>Start - Start the client process</li> <li>Stop - Stop the client process</li> <li>Restart - Restart the clients process</li> </ul> <p>The general syntax is:</p> <pre><code>sudo systemctl enable|disable|start|stop|restart service_name.service\n</code></pre> <p>To check service output use journalctl</p> <p><pre><code>sudo journalctl -u serviceName.service -b\n</code></pre> or continuously print new entries as they are appended to the journal <pre><code>sudo journalctl -xefu serviceName.service\n</code></pre></p> <p>Example: <pre><code>sudo journalctl -xefu w3p_nimbus-beacon.service\n</code></pre></p>"},{"location":"Advanced/services/#list-of-services","title":"List of services","text":""},{"location":"Advanced/services/#w3p_gethservice","title":"w3p_geth.service","text":"<p>Geth - Ethereum execution client</p> <p>The w3p_geth.service file is a configuration file used to define a systemd service for running the Geth (Go Ethereum) client as a background service on Linux systems. Using w3p_geth.service, you can ensure that Geth starts automatically on boot, restarts on failure, and runs with specified parameters.</p> <p>This service runs script located: /home/ethereum/clients/geth/geth.sh</p> <pre><code>#!/bin/bash\ngeth --authrpc.port=8551 --http --http.port 8545 --http.addr 0.0.0.0 --http.vhosts '*' --ws --ws.port 8546 --ws.addr 0.0.0.0 --ws.origins '*' --authrpc.jwtsecret /home/ethereum/clients/secrets/jwt.hex --state.scheme=path --discovery.port 30303 --port 30303\n</code></pre> <p>If you need to change geth startup parameters edit this file and then restart service.</p>"},{"location":"Advanced/services/#w3p_lighthouse-beaconservice","title":"w3p_lighthouse-beacon.service","text":"<p>Lighthouse - Ethereum consensus client</p>"},{"location":"Advanced/services/#w3p_w3p_nimbus-beaconservice","title":"w3p_w3p_nimbus-beacon.service","text":"<p>Nimbus - Ethereum light weight consensus client</p>"},{"location":"Advanced/services/#w3p_bsmservice","title":"w3p_bsm.service","text":"<p>Basic System Monitor</p> <p>Simplistic system monitor based on <code>psutils</code> with a dedicated http endpoint.</p>"},{"location":"Advanced/services/#w3p_bnmservice","title":"w3p_bnm.service","text":"<p>Basic Node Monitor</p> <p>A simple tool to monitor ETH2 nodes based on Web 3 Pi project. Monitor pushes data to the InfluxDB instance that, in turn, may be queried by Grafana to produce a visual representation of the node state. It works in parallel with basic system monitor and allows monitoring of multiple nodes (both single and dual-device setups).</p>"},{"location":"Advanced/services/#grafanaservice","title":"grafana.service","text":"<p>Grafana monitoring service</p>"},{"location":"Advanced/services/#influxdbservice","title":"influxDB.service","text":"<p>InfluxDB service</p>"},{"location":"GetStart/pair-devices/","title":"Dual-Devices Mode","text":"<p>The following section provides a step-by-step guide for configuring, deploying, and running a full Ethereum Node hosted on two Raspberry Pi devices</p> <p>Suggested configurations:</p> <ul> <li>Two Rpi 5</li> <li>Two Rpi 4</li> <li>Rpi 5 + Rpi 4</li> </ul> <p>or any other configuration including CM4.</p> <p>A device with an execution client needs 2TB+ fast storage. A device with a consensus client needs 256GB+ fast storage.</p> <p>\u26a0\ufe0f To avoid errors during the first setup, please follow the instructions precisely. \u26a0\ufe0f</p>"},{"location":"GetStart/pair-devices/#hardware-requirements","title":"Hardware Requirements","text":"<p>The default setup requires the following hardware components:</p> <ul> <li>2 x Raspberry Pi (8GB) starter kits</li> <li>2 x SSD (one for each device)</li> <li>1 x SD Card reader/writer</li> <li>2 x Fast microSD Card</li> </ul>"},{"location":"GetStart/pair-devices/#raspberry-pi","title":"Raspberry Pi","text":"<p>You can use:</p> <ul> <li>Raspberry Pi 5 with Active cooling</li> <li>Raspberry Pi 4 with Active cooling</li> <li>Raspberry Pi CM4 with Active cooling and with motherboard</li> </ul> <p>8GB RAM is required.</p>"},{"location":"GetStart/pair-devices/#cooling","title":"Cooling","text":"<p>Active colling is required to avoid throttling and keep sufficient performance/stability on the system. Please see \"Hardware\" section for more information.</p>"},{"location":"GetStart/pair-devices/#storage","title":"Storage","text":"<p>2 TB fast drive is required for device running execution client (Geth) 256 GB+ fast drive is required for device running consensus client (Nimbus/Lighthouse)</p> <p>With Raspberry Pi 5 you have three options for storage:</p> <ul> <li>external USB SSD drive (wide availability)</li> <li>m.2 NVMe drive with NVMe HAT for Raspberry Pi 5 (max performance)</li> <li>m.2 NVMe drive with USB m.2 adapter </li> </ul> <p>Raspberry Pi 5 has a PCIe x1 connector on board so with a special adapter m.2 NVMe drive can be used. This option gives the maximum possible performance. For more information visit: Recommended Hardware</p> <p>With Raspberry Pi 4 you have two options for storage:</p> <ul> <li>external USB SSD drive (wide availability)</li> <li>m.2 NVMe drive with USB m.2 adapter </li> </ul> <p>If you use USB always choose USB 3.0 ports (blue)</p>"},{"location":"GetStart/pair-devices/#microsd-card","title":"microSD Card","text":"<p>Flashing a microSD card takes time, but it can be reduced by using a fast device. Additionally, using a fast micro SD card results in a shorter booting time. A few examples:</p> <ul> <li>Silicon Power 3D NAND</li> <li>SanDisk Extreme Pro</li> <li>Kingston Canvas React</li> </ul> <p>More information</p> <p>https://www.tomshardware.com/best-picks/raspberry-pi-microsd-cards.</p>"},{"location":"GetStart/pair-devices/#power-supply","title":"Power Supply","text":"<p>As a power supply, we recommend an official 15W PSU for Raspberry Pi 4 or official 27W PSU for Raspberry Pi 5.</p>"},{"location":"GetStart/pair-devices/#hardware-connection","title":"Hardware Connection","text":"<p>After gathering all the necessary hardware, unbox the Raspberry Pi devices and connect it as specified below:</p>"},{"location":"GetStart/pair-devices/#connection-diagram","title":"Connection Diagram","text":"<p>\u26a0\ufe0f For the mDNS mechanism to work, it is crucial that all devices are connected within the same local network. \u26a0\ufe0f</p> <p>Optimally using one network switch.</p>"},{"location":"GetStart/pair-devices/#photos","title":"Photos","text":"<p>Below photos illustrate example setups</p> <p></p>"},{"location":"GetStart/pair-devices/#os-images","title":"OS Images","text":"<p>The image contains a preconfigured Linux distribution capable of running an Ethereum Node.</p>"},{"location":"GetStart/pair-devices/#prerequisites","title":"Prerequisites","text":"<p>To write an image on an SD card, it is recommended to use the official tool provided by the Raspberry Pi Foundation:</p> <ul> <li>Raspberry Pi Imager</li> </ul> <p>After installing it on your PC, you can download the newest Web 3 Pi image. </p> <p>You need two image files:</p> <ul> <li>one for execution client (download)</li> <li>second for consensus client (download)</li> </ul> <p>List of all images: Web 3 Pi images</p>"},{"location":"GetStart/pair-devices/#writing-images","title":"Writing Images","text":"<p>Follow the instructions below to write images on a microSD card for both devices.</p>"},{"location":"GetStart/pair-devices/#execution-client","title":"Execution client","text":"<ul> <li>Insert a microSD card into a card reader and connect the reader to your PC (You may need microSD to SD adapter)</li> <li>Open the Raspberry Pi Imager on your PC</li> <li>Choose device type</li> <li>Choose the downloaded image for execution client as a source image</li> <li>Choose the SD card reader as a target device</li> <li>Perform any custom configuration steps that you need<ul> <li>Set hostname to eop-exec</li> <li>Enable SSH authentication</li> <li>Set username and password (e.g., raspberry/raspberry) (Do not change username and password)</li> <li>Uncheck \"Eject media when finished\"</li> </ul> </li> <li>Write the image to the SD card</li> <li>(optionally) Eject the card and insert it into the device</li> <li>Do not interrupt verify step</li> </ul> <p>Remember the hostname</p> <p>We use mDNS, allowing users to connect to Raspberry Pi with the hostname instead of the IP address after proper installation.</p> <pre><code>eop-exec.local\n</code></pre> <p>An example screenshot with settings for the geth node: </p> <p>Important note</p> <p>After installation, the SSH username will be ethereum, and the password will also be ethereum. All other users will be disabled.</p>"},{"location":"GetStart/pair-devices/#consensus-client","title":"Consensus Client","text":"<ul> <li>Insert a microSD card into a card reader and connect the reader to your PC (You may need microSD to SD adapter)</li> <li>Open the Raspberry Pi Imager on your PC</li> <li>Choose device type</li> <li>Choose the downloaded image for execution client as a source image</li> <li>Choose the SD card reader as a target device</li> <li>Perform any custom configuration steps that you need<ul> <li>Set hostname to eop-consensus</li> <li>Enable SSH authentication</li> <li>Set username and password (e.g., raspberry/raspberry) (Do not change username and password)</li> <li>Uncheck \"Eject media when finished\"</li> </ul> </li> <li>Write the image to the SD card</li> <li>(optionally) Eject the card and insert it into the device</li> <li>Do not interrupt verify step</li> </ul> <p>Remember the hostname</p> <p>We use mDNS, allowing users to connect to Raspberry Pi with the hostname instead of the IP address after proper installation.</p> <pre><code>eop-consensus.local\n</code></pre> <p></p> <p>Important note</p> <p>After installation, the SSH username will be ethereum, and the password will also be ethereum. All other users will be disabled.</p> <p>If some steps remain unclear, you can visit the Raspberry Pi \"getting started\" page for more information on Imager settings and usage.</p>"},{"location":"GetStart/pair-devices/#initial-configuration","title":"Initial configuration","text":"<p>Web3 Pi image uses classic /boot/firmware/config.txt as config file. This allows you to customize your setup before the first run. After writing the image to the SD card you should see a new drive in your PC. There is a config.txt file. This config is for Raspberry Pi but Web3 Pi adds its own sections to it.</p> <pre><code># Web3 Pi config\n# Web3 Pi config - Execution endpoint\n[web3pi]\ngeth=false\nnimbus=false\nlighthouse=false\n\n# Monitoring\ninfluxdb=false\ngrafana=false\nbsm=true\nbnm=false\n\n#Execution endpoint address\nexec_url=http://localhost:8551\n\n[geth]\ngeth_port=30303\n\n[nimbus]\nnimbus_port=9000\n\n[lighthouse]\nlighthouse_port=9000\n\n# End of Web3 Pi config\n</code></pre> <p>Here you can choose which services will automatically start during boot.</p> <p>true = service enable false = service disable other value or no value = no change</p> <p>It is recommended to always leave  bsm=true</p> <p>Lighthous vs. Nimbus</p> <p>Nimbus needs less resources so it is ideal for devices like Raspberry Pi</p>"},{"location":"GetStart/pair-devices/#installation","title":"Installation","text":"<p>The Raspberry Pi devices will be configured during the initial run, and its software will be updated. After this step, devices can be used to host an Ethereum Node.</p>"},{"location":"GetStart/pair-devices/#warning","title":"Warning","text":"<p>\u26a0\ufe0f In most cases, the installation script erases the SSD content. \u26a0\ufe0f</p>"},{"location":"GetStart/pair-devices/#checklist-before-the-installation","title":"Checklist before the installation","text":"<ul> <li>Make sure that the device is configured correctly (i.e., it has a valid active cooling system installed)</li> <li>Make sure that you use the correct SSD (Geth device: 2TB, Lighthouse device: 0.5TB)</li> <li>Internet access is required (default DHCP)</li> </ul> <p>The SSD contents will not be erased if you have already configured Web3 Pi using this SSD. However, to force the installer to erase the configured disk, connect it to any device that you can access and follow these commands: <pre><code>cd /mnt/storage\ntouch .format_me\n</code></pre> The installer will forcefully erase the SSD if the file .format_me exists in the <code>/mnt/storage</code> directory.</p>"},{"location":"GetStart/pair-devices/#installation_1","title":"Installation","text":"<ul> <li>Insert the previously prepared SD card into the device</li> <li>Connect the SSD to the USB 3.0 port or use NVMe m.2 drive with PCIe adapter</li> <li>Connect the Ethernet cable to the device</li> <li>Optionally: connect HDMI cable to the monitor and the device using HDMI 0 port (on the device)</li> <li>Connect the Raspberry Pi power supply to the device</li> </ul> <p>After the device is powered up, it will enter the process of updating the software and configuring itself to act as an Ethereum Node.</p> <p>\u26a0\ufe0f This process can take up to 15 minutes. \u26a0\ufe0f</p> <p>Repeat this for both devices.</p>"},{"location":"GetStart/pair-devices/#installation-verification","title":"Installation verification","text":"<p>Check installation progress by opening </p> <p>http://eop-exec.local:7197/node/system/status</p> <p>and</p> <p>http://eop-consensus.local:7197/node/system/status</p> <p>When installation is completed you will see JSON like this: <pre><code>{\"host_name\": \"eop-exec\", \"num_cores\": 4, \"cpu_percent\": 14.9, \"mem_total\": 8324055040, \"mem_used\": 6542295040, \"mem_free\": 503726080, \"mem_percent\": 81.8, \"swap_total\": 0, \"swap_used\": 4642058240, \"swap_free\": 12537806848, \"swap_percent\": 27.0, \"disk_used\": 1207331737600}\n</code></pre></p> <p>If the site is not available, please wait and try again. Installation can take up to 15 minutes.</p> <p>mDNS</p> <p>mDNS service needs some time to start. Raspberry Pi over IP address will be accesible quicker than using host name. mDNS should be available in less than 15 min from the start.\u00a0</p>"},{"location":"GetStart/pair-devices/#secure-communication","title":"Secure Communication","text":"<p>Both devices have to establish a secure communication channel. This is achieved by creating a common JWT secret file shared by clients.</p> <p>The installation script has already generated a common directory structure to store the JWT secret file. To finish the configuration, the secret file has to be populated across devices. Finish the process by executing the following commands.</p> <p>Copy the secret file from consensus device to the execution device:</p> <ol> <li>Login to eop-consensus.local using ssh client</li> <li>User: ethereum Pass: ethereum (password change is required at first login)</li> <li><pre><code>cd\nscp clients/secrets/jwt.hex eop-exec.local:~/clients/secrets\n</code></pre></li> <li>When you encounter a similar prompt, confirm wiriting <code>yes</code> and the press . <pre><code>The authenticity of host 'eop-exec.local (192.168.X.X)' can't be established.\nED25519 key fingerprint is SHA256:&lt;&lt;&lt;&lt;key&gt;&gt;&gt;&gt;&gt;&gt;\nThis key is not known by any other names.\nAre you sure you want to continue connecting (yes/no/[fingerprint])?\n</code></pre> <li>Then you will see something similar to what is shown below. <pre><code>Warning: Permanently added 'eop-exec.local' (ED25519) to the list of known hosts.\nConnection closed by 192.168.X.X port 22\nscp: Connection closed\n</code></pre></li> <p>SCP command will ask you for password (eop-exec.local device). Default is \"ethereum\". But on first login user is forced to change it.</p> <p>After executing the above action, the devices can be connected and run as a single Ethereum Node.</p>"},{"location":"GetStart/pair-devices/#running-execution-client","title":"Running execution client","text":"<p>The consensus client starts automatically but the execution client on the second device does not because it can be done after copying the secret file from the preview step.</p> <ol> <li>Login to eop-exec.local using ssh client</li> <li>User: ethereum Pass: ethereum (password change is required at first login)</li> <li>Edit <code>config.txt</code> file to Geth service (auto start) <pre><code>sudo nano /boot/firmware/config.txt\n</code></pre></li> <li>Edit <code>geth=false</code> to <code>geth=true</code></li> <li>Save the file by pressing Ctrl+X, then confirm by pressing y, and finally hit the  button. <li>Restart the system using command: <pre><code>sudo ./scripts/reboot.sh\n</code></pre></li> <p>On the next startup, Geth service should be running</p> <p>TIP: service monitoring</p> <p>Service output can be monitored using command: <pre><code>sudo journalctl -xefu w3p_geth.service\u00a0\n</code></pre></p>"},{"location":"GetStart/pair-devices/#grafana-monitoring-verification","title":"Grafana Monitoring verification","text":"<p>Grafana, InfluxDB, and Basic Node Monitor (BNM) are disabled in pair devices mode. After providing manual configuration they can be enabled and used. </p>"},{"location":"GetStart/pair-devices/#account-verification","title":"Account verification","text":"<ul> <li>SSH login into the device as ethereum/ethereum</li> <li>If the ethereum user does not exist, it means that the installation failed unexpectedly (in such case, contact support)</li> <li>By default, ethereum user is forced to change the password during the first login</li> </ul>"},{"location":"GetStart/pair-devices/#network-configuration-verification","title":"Network configuration verification","text":"<ul> <li>From Raspberry Pi device run the command:   <pre><code>ping -c 4 google.com\n</code></pre> <pre><code>PING google.com (142.250.186.206) 56(84) bytes of data.\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=1 ttl=59 time=2.83 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=2 ttl=59 time=3.62 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=3 ttl=59 time=2.23 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=4 ttl=59 time=3.73 ms\n\n--- google.com ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3005ms\nrtt min/avg/max/mdev = 2.229/3.102/3.734/0.614 ms\n</code></pre></li> </ul>"},{"location":"GetStart/pair-devices/#summary","title":"Summary","text":"<p>At this point, devices are configured and ready to host an Ethereum Node.</p> <p>If you have default config.txt Geth, Nimbus software will start automatically as a service.</p> <p>For more information on configuring or modifying elements of Web3 Pi installation, please read the Advance Settings section of this documentation.</p>"},{"location":"GetStart/quick-start/","title":"Introduction","text":"<p>Web3 Pi provides a custom image file that contains all the software needed to run a full Ethereum node on Raspberry Pi single-board computers.</p> <ul> <li>Execution client</li> <li>Consensus client</li> <li>Monitoring tools</li> </ul>"},{"location":"GetStart/quick-start/#available-configurations","title":"Available Configurations","text":"<p>The Web3 Pi node can be deployed in either a single-device or on dual-devices.</p>"},{"location":"GetStart/quick-start/#single-device-mode","title":"Single-Device Mode","text":"<p>Single device mode is the simplest configuration. For optimal performance, it is recommended to use a Raspberry Pi 5.</p> <p>Single-Device - Getting started</p>"},{"location":"GetStart/quick-start/#dual-devices-mode","title":"Dual-Devices Mode","text":"<p>Dual-devices mode requires additional configuration, but a single device may start running low on resources for a Raspberry Pi 4. In dual-devices mode, one Raspberry Pi acts as the consensus client and the other as the execution client. The solution maintains performance and stability by splitting tasks across two devices.   </p> <p>The following combinations are supported:</p> <ul> <li>Two Raspberry Pi 5</li> <li>Two Raspberry Pi 4</li> <li>One Raspberry Pi 5 and one Raspberry Pi 4</li> <li>Any combination including Compute Module 4 (CM4)</li> </ul> <p>Dual-Devices - Getting started</p>"},{"location":"GetStart/single-device/","title":"Single-Device Mode","text":"<p>The following section provides a step-by-step guide for configuring, deploying, and running a full Ethereum Node hosted on a single Raspberry Pi device. While a Raspberry Pi 5 is recommended for optimal performance, a Raspberry Pi 4 and Compute Module 4 (CM4) can also be used.</p> <p>\u26a0\ufe0f To avoid errors during the first setup, please follow the instructions precisely. \u26a0\ufe0f</p>"},{"location":"GetStart/single-device/#hardware-requirements","title":"Hardware Requirements","text":"Raspberry Pi 5Raspberry Pi 4Raspberry Pi CM4 <ul> <li>1 x Raspberry Pi 5 (8GB) with Active cooling</li> <li>1 x 2TB SSD drive (external USB SSD or NVMe m.2 with adapter) - Recommended Hardware</li> <li>1 x SD Card reader/writer </li> <li>1 x microSD Card</li> <li>1 x Power supply</li> </ul> <ul> <li>1 x Raspberry Pi 4 (8GB) with Active cooling</li> <li>1 x 2TB SSD drive (external USB SSD or NVMe with m.2 to USB adapter) - Recommended Hardware</li> <li>1 x SD Card reader/writer </li> <li>1 x microSD Card</li> <li>1 x Power supply</li> </ul> <p>CM4 module needs carier board. There are many on the market. Minimum requiments are:</p> <ul> <li>1 x Raspberry Pi CM4 (8GB) with Active cooling</li> <li>1 x 2TB fast storage - Recommended Hardware</li> <li>1 x Power supply</li> <li>32GB+ storage for operating system (microSD or eMMC)</li> </ul> <p>Installing Web3 Pi on the CM4 requires more knowledge. CM4 modules come with built-in eMMC memory, and in this case, you need to use the rpiboot application before using Raspberry Pi Imager. If your module does not have built-in memory and uses an SD card, the installation process is similar to a standard Raspberry Pi.  More information can be found on the manufacturer's website: Raspberry Pi Documentation.  In some cases, a bootloader update may be necessary, which is described here: How to Update the Raspberry Pi Compute Module 4 Bootloader EEPROM.</p>"},{"location":"GetStart/single-device/#cooling","title":"Cooling","text":"<p>Active cooling is required to avoid throttling and keep sufficient performance/stability of the system.</p>"},{"location":"GetStart/single-device/#storage","title":"Storage","text":"<p>2 TB fast drive is required.  With Raspberry Pi 5 you have three options for storage:</p> <ul> <li>external USB SSD drive (wide availability)</li> <li>m.2 NVMe drive with NVMe HAT for Raspberry Pi 5 (max performance)</li> <li>m.2 NVMe drive with USB m.2 adapter </li> </ul> <p>Raspberry Pi 5 has a PCIe x1 connector on board so with a special adapter m.2 NVMe drive can be used. This option gives the maximum possible performance. For more information visit: Recommended Hardware</p> <p>If you use USB always choose USB 3.0 ports (blue)</p>"},{"location":"GetStart/single-device/#microsd-card","title":"microSD Card","text":"<p>Flashing a microSD card takes time, but it can be reduced by using a fast device. Additionally, using a fast micro SD card results in a shorter booting time. A few examples:</p> <ul> <li>Silicon Power 3D NAND</li> <li>SanDisk Extreme Pro</li> <li>Kingston Canvas React</li> </ul> <p>More information</p> <p>https://www.tomshardware.com/best-picks/raspberry-pi-microsd-cards.</p>"},{"location":"GetStart/single-device/#power-supply","title":"Power Supply","text":"<p>As a power supply, we recommend an official PSU 5,1V / 5A for Raspberry Pi 5. Raspberry Pi 5 + 2TB drive can use a significant amount of power so a sufficient power supply is important for stability.</p>"},{"location":"GetStart/single-device/#cooling_1","title":"Cooling","text":"<p>Active cooling is required to avoid throttling and keep sufficient performance/stability on the system.</p>"},{"location":"GetStart/single-device/#storage_1","title":"Storage","text":"<p>2 TB fast drive is required.  With Raspberry Pi 4 you have two options for storage:</p> <ul> <li>external USB SSD drive (wide availability)</li> <li>m.2 NVMe drive with USB m.2 adapter </li> </ul> <p>If you use USB always choose USB 3.0 ports (blue)</p>"},{"location":"GetStart/single-device/#microsd-card_1","title":"microSD Card","text":"<p>Flashing a microSD card takes time, but it can be reduced by using a fast device. Additionally, using a fast micro SD card results in a shorter booting time. A few examples:</p> <ul> <li>Silicon Power 3D NAND</li> <li>SanDisk Extreme Pro</li> <li>Kingston Canvas React</li> </ul> <p>More information</p> <p>https://www.tomshardware.com/best-picks/raspberry-pi-microsd-cards.</p>"},{"location":"GetStart/single-device/#power-supply_1","title":"Power Supply","text":"<p>As a power supply, we recommend an official PSU 5,1V / 3A for Raspberry Pi 4. Raspberry Pi 4 + 2TB drive can use a significant amount of power so a sufficient power supply is important for stability.</p>"},{"location":"GetStart/single-device/#hardware-connection","title":"Hardware Connection","text":"<p>After gathering all the necessary hardware, unbox the Raspberry Pi device and connect it as specified below:</p>"},{"location":"GetStart/single-device/#connection-diagram","title":"Connection Diagram","text":""},{"location":"GetStart/single-device/#photos","title":"Photos","text":"<p>Below photos illustrate example setups</p>"},{"location":"GetStart/single-device/#sample-configuration-with-usb-drive","title":"Sample configuration with USB drive","text":""},{"location":"GetStart/single-device/#sample-configuration-with-nvme-drive","title":"Sample configuration with NVMe drive","text":""},{"location":"GetStart/single-device/#os-images","title":"OS Images","text":"<p>The image contains a preconfigured Linux distribution capable of running an Ethereum Node.</p>"},{"location":"GetStart/single-device/#prerequisites","title":"Prerequisites","text":"<p>To write an image on an SD card, it is recommended to use the official tool provided by the Raspberry Pi Foundation:</p> <ul> <li>Raspberry Pi Imager</li> </ul> <p>After installing it on your PC, you can download the newest Web3 Pi image. This image will be used on each device, so only one copy is required:</p> <ul> <li>Web3 Pi image for Raspberry Pi</li> </ul>"},{"location":"GetStart/single-device/#writing-images","title":"Writing Images","text":"<p>Follow the instructions below to write images on a microSD card.</p> <ul> <li>Insert a microSD card into a card reader and connect the reader to your PC (You may need microSD to SD adapter)</li> <li>Open the Raspberry Pi Imager on your PC</li> <li>Choose device type</li> <li>Choose the downloaded image as a source image</li> <li>Choose the SD card reader as a target device</li> <li>Perform any custom configuration steps that you need (Check the screenshot below)<ul> <li>Set hostname to eop-1</li> <li>Enable SSH authentication</li> <li>Set username and password (e.g., raspberry/raspberry) (Do not change username and password)</li> <li>Uncheck \"Eject media when finished\"</li> </ul> </li> <li>Write the image to the SD card</li> <li>Do not interrupt verify step</li> </ul> <p>Remember the hostname</p> <p>We use mDNS, allowing users to connect to Raspberry Pi with the hostname instead of the IP address after proper installation.</p> <pre><code>eop-1.local\n</code></pre> <p>An example screenshot with settings for the geth node:</p> <p></p> <p>Important note</p> <p>After installation, the SSH username will be ethereum, and the password will also be ethereum. All other users will be disabled.</p> <p>If some steps remain unclear, you can visit the Raspberry Pi \"getting started\" page for more information on Image settings and usage.</p>"},{"location":"GetStart/single-device/#initial-configuration","title":"Initial Configuration","text":"<p>Web3 Pi image uses classic /boot/firmware/config.txt as config file. This allows you to customize your setup before the first run. After writing the image to the SD card you should see a new drive in your PC. There is a config.txt file. This config is for Raspberry Pi but Web3 Pi adds its own sections to it.</p> <pre><code># Web3 Pi config - single node\n[web3pi]\ngeth=true\nnimbus=true\nlighthouse=false\n\n# Monitoring\ninfluxdb=true\ngrafana=true\nbsm=true\nbnm=true\n\n#Execution endpoint address\nexec_url=http://localhost:8551\n\n[geth]\ngeth_port=30303\n\n[nimbus]\nnimbus_port=9000\n\n[lighthouse]\nlighthouse_port=9000\n\n# End of Web3 Pi config\n</code></pre> <p>Here you can choose which services will automatically start during boot.</p> <p>true = service enable false = service disable other value or no value = no change</p> <p>It is recommended to always leave  bsm=true</p> <p>Lighthous vs. Nimbus</p> <p>Nimbus needs less resources so it is ideal for devices like Raspberry Pi</p>"},{"location":"GetStart/single-device/#installation","title":"Installation","text":"<p>The Raspberry Pi device will be configured during the initial run, and its software will be updated.  After this step, devices can be used to host an Ethereum Node.</p>"},{"location":"GetStart/single-device/#warning","title":"Warning","text":"<p>\u26a0\ufe0f In most cases, the installation script erases the SSD content. \u26a0\ufe0f</p>"},{"location":"GetStart/single-device/#checklist-before-the-installation","title":"Checklist before the installation","text":"<ul> <li>Make sure that the device is configured correctly (i.e., it has a valid active cooling system installed)</li> <li>Make sure that you use the correct SSD (2TB or more)</li> <li>Internet access is required (default DHCP)</li> </ul> <p>The SSD contents will not be erased if you have already configured Web3 Pi using this SSD. However, to force the installer to erase the configured disk, connect it to any device that you can access and follow these commands: <pre><code>cd /mnt/storage\ntouch .format_me\n</code></pre> The installer will forcefully erase the SSD if the file .format_me exists in the <code>/mnt/storage</code> directory.</p>"},{"location":"GetStart/single-device/#installation_1","title":"Installation","text":"<ul> <li>Insert the previously prepared SD card into the device</li> <li>Connect the SSD to the USB 3.0 port or use NVMe m.2 drive with PCIe adapter</li> <li>Connect the Ethernet cable to the device</li> <li>Optionally: connect HDMI cable to the monitor and the device using HDMI 0 port (on the device)</li> <li>Connect the Raspberry Pi 5 power supply to the device</li> </ul> <p>After the device is powered up, it will enter the process of updating the software and configuring itself to act as an Ethereum Node.</p> <p>\u26a0\ufe0f This process can take up to 15 minutes. \u26a0\ufe0f</p>"},{"location":"GetStart/single-device/#installation-verification","title":"Installation Verification","text":"<p>Check installation progress by opening  http://eop-1.local:7197/node/system/status</p> <p>When the installation is completed you will see JSON like this: <pre><code>{\"host_name\": \"eop-1\", \"num_cores\": 4, \"cpu_percent\": 14.9, \"mem_total\": 8324055040, \"mem_used\": 6542295040, \"mem_free\": 503726080, \"mem_percent\": 81.8, \"swap_total\": 0, \"swap_used\": 4642058240, \"swap_free\": 12537806848, \"swap_percent\": 27.0, \"disk_used\": 1207331737600}\n</code></pre></p> <p>If the site is not available, please wait and try again.</p> <p>mDNS</p> <p>mDNS service needs some time to start. Raspberry Pi over IP address will be accessible quicker than using host name \"eop-1.local\"  mDNS should be available in less than 15 min from the start.\u00a0</p>"},{"location":"GetStart/single-device/#grafana-monitoring-verification","title":"Grafana Monitoring Verification","text":"<p>Open Grafana dashboard: http://eop-1.local:3000</p> <p>Default login and password is: <code>admin</code> You need to change it during first login.</p> <p>Go to <code>Dashboards</code> menu and then to <code>Ethereum Nodes Monitor</code> panel.</p> Sync just startedSync in progressSync completed <p>Grafana dashboard/Sync just started  </p> <p>Grafana dashboard/Sync in progress </p> <p>Grafana dashboard/Sync completed  </p>"},{"location":"GetStart/single-device/#account-verification","title":"Account Verification","text":"<ul> <li>SSH login into the device as ethereum/ethereum</li> </ul> <p>Note</p> <ul> <li>If the ethereum user does not exist, it means that the installation failed unexpectedly (in such case, contact the support)\u00a0</li> <li>By default, ethereum user is forced to change the password during the first login</li> </ul>"},{"location":"GetStart/single-device/#network-configuration-verification","title":"Network Configuration Verification","text":"<ul> <li>From Raspberry Pi device run the command:   <pre><code>ping -c 4 google.com\n</code></pre> <pre><code>PING google.com (142.250.186.206) 56(84) bytes of data.\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=1 ttl=59 time=2.83 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=2 ttl=59 time=3.62 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=3 ttl=59 time=2.23 ms\n64 bytes from waw07s05-in-f14.1e100.net (142.250.186.206): icmp_seq=4 ttl=59 time=3.73 ms\n\n--- google.com ping statistics ---\n4 packets transmitted, 4 received, 0% packet loss, time 3005ms\nrtt min/avg/max/mdev = 2.229/3.102/3.734/0.614 ms\n</code></pre></li> </ul>"},{"location":"GetStart/single-device/#summary","title":"Summary","text":"<p>At this point, the device is configured and ready to host an Ethereum Node.</p> <p>If you have default config.txt, Geth, Nimbus and monitoring software will start automatically as a service.</p> <p>For more information on configuring or modifying elements of Web3 Pi installation, please read the Advance Settings section of this documentation.</p>"},{"location":"Guides/staking/","title":"Solo Staking with Web3 Pi","text":"<p>Solo Staking is the most straightforward way to realize profit from the Ether (ETH tokens) you own. At minimum, it only requires you to deposit 32 ETH into an official staking deposit smart contract and to run a validator on your full Ethereum node, while ensuring the node stays connected  to the Internet.</p> <p>By running your validator on the Ethereum mainnet, you become part of the most crucial component  of the Ethereum ecosystem - the layer which maintains the consensus of the blockchain,  and therefore ensures its resilience against attacks.</p> <p>While helping secure the Ethereum mainnet by validating the transaction blocks, you gain a small reward every epoch (approximately 6 minutes) as long as your validator is able to sign and  send the required attestation in time for it to be included in the chain.</p>"},{"location":"Guides/staking/#solo-staking-on-web3-pi","title":"Solo staking on Web3 Pi","text":"<p>Web3 Pi provides all the necessary components required to allow you to start staking on the Ethereum mainnet. It runs both the execution layer client (<code>geth</code>) and the consensus layer client (<code>nimbus</code>). Once it's set-up and the clients are synchronized, the only remaining steps are creation of the staking deposit keys, depositing the Ether tokens and adding the created keys to your consensus layer client.</p> <p>The good news is that you're not even limited to a single validator and a single 32 ETH stake.  Even if you'd like to stake larger amounts, our tests have shown it should be possible to run as many validators as you require on a single Raspberry Pi 5.</p> <p>In this guide we'll show you how easy it is.</p>"},{"location":"Guides/staking/#prerequisites","title":"Prerequisites","text":"<ul> <li>32 Ether</li> <li>a fully-synced node</li> <li>Metamask installed and paired with the wallet you wish to stake ETH from</li> </ul> <p>Also, while we enumerate all the critical steps, needed to start staking with Web3 Pi, ultimately, it's your Ether, your wallet and your node. Therefore, you are still responsible for  your own education on this matter, to ensure you take all the necessary precautions to keep your wallet, the tokens and your validator keys safe and secure. While following the steps, please don't skip any recommended reading or cut corners when asked for actions that aim to make the process safe. </p> <p>Moreover, as we don't intend for this guide to be exhaustive source of information. If you're uncertain about any aspect of running your own Ethereum node, staking ether or anything else we're about to discuss, by all means, we encourage you to do  your own research.</p>"},{"location":"Guides/staking/#create-the-deposit","title":"Create the deposit","text":""},{"location":"Guides/staking/#1-go-to-httpslaunchpadethereumorg","title":"1. Go to https://launchpad.ethereum.org/","text":"<p>Visit https://launchpad.ethereum.org/ and click on \"Become a validator\".</p> <p></p>"},{"location":"Guides/staking/#2-proceed-through-the-advisories-checklist","title":"2. Proceed through the advisories checklist","text":"<p>Make sure to read all the contents carefully before proceeding through each step. Don't skip anything unless you're absolutely sure what each step entails.</p> <p></p>"},{"location":"Guides/staking/#3-choose-your-clients","title":"3. Choose your clients","text":"<p>The launchpad is aimed at a general user and there are various considerations for choosing specific execution and consensus layer clients. Due to mechanics of the global staking ecosystem, to strengthen the network and limit the impact of potential attacks, it's generally recommended  to choose a minority client.</p> <p>However, while the above is true, and while the launchpad enables you to choose any of the available clients, the default, battle-tested configuration for the Web3 Pi  includes <code>geth</code> and <code>nimbus</code> specifically. </p> <p>We have devoted a considerable effort to finding the setup that's optimally suited to the characteristics of a such a small-footprint device as Raspberry Pi 5 and  this is the pair of clients which we both recommend and, by extension, include  in our default Web3 Pi image.</p> <p>So, unless you're sure you wish to choose differently, and are willing to reconfigure the device, this is the pair that you should also choose.</p> <p></p> <p></p>"},{"location":"Guides/staking/#4-generate-key-pairs","title":"4. Generate key pairs","text":"<p>Now you're ready to generate the key pairs, which control your Ether stake and which  bind the stake to a given validator. </p>"},{"location":"Guides/staking/#security-considerations","title":"Security considerations","text":"<p>We cannot stress enough how important it is to execute this step in a secure manner. Given that once you submit your deposit, your validator keys are directly bound to  your stake, an attacker with malicious intent and in possession of these keys, can, in the least cause you to lose your staking rewards, and at most, even trigger a complete loss of your stake through slashing.</p> <p>That's why, once you download and install the chosen key generator tool,  it is recommended to run it on a machine that's disconnected from the network.</p> <p>Please also ensure you keep your mnemonic phrase safe and out of reach of anybody but you. This is the only way to regenerate your validator key if it gets lost.</p>"},{"location":"Guides/staking/#provide-the-withdrawal-address","title":"Provide the withdrawal address","text":"<p>We strongly recommend setting the withdrawal key right away when generating the validator keys. Although it is optional and can be performed later on, it can also be performed only once. Setting it at this stage ensures that even if an attacker were to take control of your validator keys, they will never be able to override the address to which your stake and the rewards are withdrawn.</p> <p></p>"},{"location":"Guides/staking/#generate-the-keys","title":"Generate the keys","text":"<p>Once you fill in the number of validators and the withdrawal address, you proceed with the key generation itself. You're free to choose whichever tool suits you best,  depending on your platform and preferences.  For the sake of this guide, we'll use the CLI app as the example.</p> <p></p> <p>In case of the CLI app, the Launchpad gives you the exact command that you should run in your  terminal. While you proceed, you'll be asked to provide the password to encrypt the keystore file and will receive the mnemonic phrase which can be used to recover the key.</p> <p>As mentioned previously, it is critical that you keep these mnemonics safe and private.</p> <p></p>"},{"location":"Guides/staking/#5-upload-your-deposit-data","title":"5. Upload your deposit data","text":"<p>After the key generator succeeds, you need to upload the just-generated <code>deposit_data-xxxxxx.json</code> file to the Launchpad, so that it can prepare the deposit transaction for you.</p> <p></p> <p>Once you upload that file and click continue, the last remaining step is to submit your ETH stake to the deposit contract.</p>"},{"location":"Guides/staking/#6-confirm-the-deposit","title":"6. Confirm the deposit","text":"<p>In order to do that, the Launchpad will use your MetaMask wallet to generate and send the deposit transaction.</p> <p></p> <p>Please double-check the withdrawal address and then proceed with the checklist and afterwards, with the  confirmation of the deposit transaction.</p> <p></p> <p>After the transaction is sent and processed by the blockchain, you'll get the final confirmation that the deposit has been made.</p> <p></p> <p>You also get the link to the status website which lists all the active validators, and which allows you to get the status of your validator. Please note though, that the status for your validator  may not be immediately visible, and you may need to wait a few minutes until your stake is detected  by the website.</p> <p>On successful submission and detection of the deposit, your validator status will appear as \"Deposited\".</p> <p></p>"},{"location":"Guides/staking/#add-your-validator-key-to-your-web3-pi-node","title":"Add your validator key to your Web3 Pi node","text":"<p>Please note that it takes several more hours after you submit your deposit, before your validator key is added to the pool of active validators.</p> <p>This doesn't mean that you should wait until that time before proceeding. On the contrary, you should add the validator keys to the consensus client as soon as possible so that it is ready before the time comes for it to start submitting attestations. </p> <p>That's because the moment the validator is added to the pool, it either starts getting attestation rewards - or - it starts getting penalized for not taking part in the attestation process.</p>"},{"location":"Guides/staking/#1-copy-your-validator-key-to-your-web3-pi-node","title":"1. Copy your validator key to your Web3 Pi node","text":"<p>Starting at the local directory, which you generated the validator keys from, execute the following commands (of course, replacing <code>your-node</code> with the actual hostname of your Web3 Pi node):</p> <pre><code>ssh ethereum@aopi5.local mkdir validator_keys\nscp validator_keys/keystore*.json ethereum@your-node.local:validator_keys/\n</code></pre>"},{"location":"Guides/staking/#2-import-your-validator-keys-into-the-nimbus","title":"2. Import your validator keys into the nimbus","text":"<p>First, log in normally to your Web3 Pi node's shell (<code>ssh ethereum@your-node.local</code>) and then, assuming your keys have been correctly uploaded to the <code>validator_keys</code> directory in the previous step, run:</p> <pre><code>nimbus_beacon_node deposits import --data-dir=/mnt/storage/.nimbus/data/shared_mainnet_0/\n</code></pre> <p>Tip</p> <p>The default search path for validator keys is a sub-directory named 'validator_keys' in the current working directory.</p> <p>You will be asked for your validator key password which you set in the key generator tool and afterwards, you should receive a message indicating successful import of your keystore file.</p>"},{"location":"Guides/staking/#3-restart-the-nimbus-service","title":"3. Restart the nimbus service","text":"<p>Now, the consensus client service must be restarted so that it can load the validator keys.</p> <pre><code>sudo systemctl restart w3p_nimbus-beacon\n</code></pre> <p>You may verify the success of the operation by examining the logs of the nimbus service: </p> <pre><code>sudo journalctl -xefu w3p_nimbus-beacon\n</code></pre> <p>Look for lines indicating: <code>Loading validators</code> and <code>Local validator attached</code>.</p>"},{"location":"Guides/staking/#thats-it","title":"That's it!","text":"<p>That's all that you need to do to start staking on a Web3 Pi.</p> <p>You can continue to check the logs and the status website. Your final confirmation that your validator is up and processing attestation will be the \"Active\" status there:</p> <p></p> <p>Now, you will gain staking rewards as long as your node remains online and synced, with sufficiently low network latency for the attestations to be sent in time.</p>"},{"location":"Guides/transaction_firewall/","title":"Transaction Firewall","text":"<p>One of the tools offered within the Web3-Pi ecosystem is the Transaction Firewall.</p> <p>This simple tool is designed to enhance the security of your interactions with  the Ethereum blockchain.</p> <p>It can be used alongside Web3-Pi or as a stand-alone tool. Likewise, it can be run on  the Web3-Pi device itself, or it can be installed on your own machine and use your  Web3-Pi's Ethereum node as its gateway.</p>"},{"location":"Guides/transaction_firewall/#prerequisites","title":"Prerequisites","text":"<ul> <li>latest version of Node.js</li> </ul>"},{"location":"Guides/transaction_firewall/#ubuntu","title":"Ubuntu","text":"<p>On Ubuntu or any other recent Debian-based Linux distributions, which includes the Web3-pi,  Node.js can be installed directly as follows:</p> <pre><code>sudo apt update\nsudo apt install nodejs\nsudo apt install npm\n</code></pre>"},{"location":"Guides/transaction_firewall/#nodejs-through-node-version-manager","title":"Node.js through Node Version Manager","text":"<p>Alternatively, and perhaps optimally, you can install Node.js through its dedicated version management tool, <code>nvm</code> - or - Node Version Manager.</p> <p>To install <code>nvm</code>:</p> <pre><code>curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n</code></pre> <p>And then, to install and use the latest stable Node.js through <code>nvm</code>:</p> <pre><code>nvm install --lts\nnvm use --lts\n</code></pre>"},{"location":"Guides/transaction_firewall/#installing-the-transaction-firewall","title":"Installing the Transaction Firewall","text":""},{"location":"Guides/transaction_firewall/#clone-the-repository","title":"Clone the repository","text":"<p>Once Node.js is installed, proceed with the installation of the Transaction Firewall. First, clone its repository:</p> <pre><code>git clone https://github.com/Web3-Pi/ethereum-transactions-firewall.git &amp;&amp; cd ethereum-transactions-firewall\n</code></pre>"},{"location":"Guides/transaction_firewall/#install-the-dependencies","title":"Install the dependencies","text":"<pre><code>npm install\n</code></pre>"},{"location":"Guides/transaction_firewall/#create-the-configuration-file","title":"Create the configuration file","text":"<p>Transaction Firewall is configured through a dotenv (<code>.env</code>) file, so you will need to create it and populate it with the required parameters.  (here, we're assuming configuration on a Linux machine using the <code>nano</code> editor):</p> <pre><code>touch .env\nnano .env\n</code></pre> <p>Sample contents of the configuration file:</p> <pre><code>node_env=development\nserver_port=8454\nproxy_port=18500\nwss_port=18501\nrpc_endpoint='http://localhost:8545'\nauthorized_addr_fn=\".auth_addr\"\nknown_contracts_fn=\".known_contracts\"\ncontract_abis_fn=\".contract_abis\"\n</code></pre> <p>Of course, if you're running it on your own machine, put the address of your Web3-Pi node or any other Ethereum node as the <code>rpc_endpoint</code> instead of <code>localhost</code>.</p>"},{"location":"Guides/transaction_firewall/#optional-configuration-files","title":"Optional configuration files","text":""},{"location":"Guides/transaction_firewall/#authorized-addresses","title":"Authorized addresses","text":"<p>You can optionally assign a corresponding label to each authorized address.  To do this, edit a file .auth_addr, by calling:</p> <pre><code>nano .auth_addr\n</code></pre> <p>and putting the appropriate mapping of contract addresses you'd like to interact with, e.g.:</p> <pre><code>{\n  \"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\": \"My Address\"\n}\n</code></pre>"},{"location":"Guides/transaction_firewall/#known-contracts","title":"Known contracts","text":"<p>Analogously, similar labels can be assigned to select contracts.  Edit the <code>.known_contracts</code> file and add something like:</p> <pre><code>{\n    \"0x7DD9c5Cba05E151C895FDe1CF355C9A1D5DA6429\": \"glm\"\n}\n</code></pre>"},{"location":"Guides/transaction_firewall/#contract-abis","title":"Contract ABIs","text":"<p>Finally, you may further enhance the verbosity of the information displayed by the Firewall in the transaction acceptance UI by providing it with the ABIs of the contracts you specified as known.</p> <p>To achieve that, add the <code>.contract_abis</code> file with the appropriate ABIs, e.g.:</p> <pre><code>{\n    \"glm\": [{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"sender\",\"type\":\"address\"},{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"PERMIT_TYPEHASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"holder\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"nonce\",\"type\":\"uint256\"},{\"name\":\"expiry\",\"type\":\"uint256\"},{\"name\":\"allowed\",\"type\":\"bool\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"addMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceMinter\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"recipient\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"isMinter\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"owner\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_migrationAgent\",\"type\":\"address\"},{\"name\":\"_chainId\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"account\",\"type\":\"address\"}],\"name\":\"MinterRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}]\n}\n</code></pre>"},{"location":"Guides/transaction_firewall/#running-the-transaction-firewall","title":"Running the Transaction Firewall","text":"<p>The service is configured and ready to run. To start the service, execute the following command  from the main project directory:</p> <pre><code>node index.js\n</code></pre> <p>On successful startup, the application will print the following (or similar) output:</p> <pre><code>04-10-24 08:57:20  Websocket server is running on port: 18501\nAuthorized addresses:\n0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa: my address\n\nKnown contracts:\n0x7DD9c5Cba05E151C895FDe1CF355C9A1D5DA6429: glm\n\nContracts with ABIs\nglm\n\n04-10-24 08:57:20 Transaction Firewall HTTP Server (to accept/reject transactions) is listening on port: 8454\n04-10-24 08:57:20 ValidatingProxy is running: \n04-10-24 08:57:20   proxy address (endpoint to be used in a wallet): http://diziet.local:18500\n04-10-24 08:57:20   Ethereum RPC endpoint used by the firewall:      http://aopi5.local:8545\n</code></pre> <p>To start accepting transactions, open the web browser and connect to the Transaction Firewall  Server's address. If you're running the Firewall on your Web3-Pi device,  ensure that the browser is opened on a machine in the local subnet.</p> <p>In the default single-device setup, the device name is configured as <code>eop-1</code>,  and the corresponding webpage is: http://eop-1.local:8454. Of course, if your device has a different hostname, please use that instead.</p> <p>You should be greeted with the following screen:</p> <p></p>"},{"location":"Guides/transaction_firewall/#using-the-transaction-firewall","title":"Using the Transaction Firewall","text":"<p>The firewall serves as a proxy between your wallet software and the Ethereum node. With regular calls, like e.g. <code>eth_getBalance</code>, it just parses the incoming call  and directly forwards it to the remote RPC endpoint.</p> <p>To connect to the Transaction Firewall from the wallet or your web3-enabled application, use the proxy's advertised address - (by default: `http://eop-1.local:18500)</p> <p>Note</p> <p>Only one web page instance may be opened at a time.</p> <p>Opening an additional webpage drops the previous connection  and redirects all queries to the current one.</p>"},{"location":"Guides/transaction_firewall/#regular-calls","title":"Regular calls","text":"<p>When you issue a call, it will be displayed on the Transaction Firewall's console as:</p> <pre><code>New request: eth_getBalance -&gt; params : [\"0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\",\"latest\"]\n</code></pre> <p>Note</p> <p>Although the Transaction Firewall is an asynchronous service, at the moment  it serves only one request at a time.</p> <p>Requests are not queued, and any new requests sent during acceptance of  the previous one are automatically forwarded to the configured RPC endpoint.</p>"},{"location":"Guides/transaction_firewall/#transactions","title":"Transactions","text":"<p>After you send a transaction through the Firewall, the transaction won't be immediately forwarded. Instead, you'll be asked to confirm the transaction within the Firewall's UI.</p> <p>If you have added any addresses to your authorized addresses file, when starting the firewall, any addresses used as the <code>To</code> or <code>From</code> of the transaction will be appropriately labeled.</p> <p>Similarly, more details regarding the specific transaction will be displayed if you have populated the Known contracts and Contract ABIs files.</p> <p></p> <p>If you decide to reject the transaction, it won't be sent to the remote RPC and an error will be reported to your wallet software.</p> <p>On the other hand, should you accept the transaction, or just allow the timeout to pass, the transaction will be forwarded as just another call.</p> <p>Warning</p> <p>If the Transaction Firewall web page is not open, the service automatically  forwards all requests to the configured RPC endpoint.</p>"},{"location":"Guides/transaction_firewall/#using-the-transaction-firewall-with-metamask","title":"Using the Transaction Firewall with MetaMask","text":"<p>Note</p> <p>In order for MetaMask to be able to connect to your Web3 Pi node through the Transaction Firewall, the configuration of the <code>geth</code> client on the Web3 Pi must be updated  to accept requests from any domain.</p> <p>This is achieved by adding <code>--http.corsdomain *</code>  to the last line of the script that launches <code>geth</code>, namely:  <code>/home/ethereum/clients/geth/geth.sh</code>.</p> <p>To use the Transaction Firewall while working with MetaMask, you need to configure the wallet to use it as its RPC node address.</p> <p>In order to do that, first click the list of the networks in the upper-left corner and use the \"+ Add Network\" button at the bottom of the window.</p> <p></p> <p></p> <p>Then, on the resulting screen, click \"Add a network manually\". You'll be greeted with the following screen which, assuming in this case that the Transaction Firewall is running on your Web3 Pi device, you should fill-in as suggested below:</p> <p></p> <p>Once you add the network and set it as default, any operations that you perform in MetaMask, will be passed through the Transaction Firewall.</p>"},{"location":"Hardware/LCD-dashboard/","title":"LCD dashboard","text":"<p>Go to: https://github.com/Web3-Pi/web3-pi-dashboard</p>"},{"location":"Hardware/PoERpi5/","title":"PoE Rpi 5","text":"<p>Power over Ethernet (PoE) allows network cables to carry electrical power, eliminating the need for separate power supplies for devices connected to a network. This is particularly useful for devices like IP cameras, VoIP phones, wireless access points, and single-board computers like the Raspberry Pi.</p>"},{"location":"Hardware/PoERpi5/#poe-with-raspberry-pi-5","title":"PoE with Raspberry Pi 5","text":"<ol> <li> <p>PoE HAT  The Raspberry Pi Foundation has released PoE HATs (Hardware Attached on Top) for their previous models, such as the Raspberry Pi 3B+ and Raspberry Pi 4. For the Raspberry Pi 5, a new PoE HAT will be designed to fit the updated form factor and power requirements. This HAT connects to the GPIO pins and the Ethernet port to draw power directly from the Ethernet cable.</p> </li> <li> <p>Power Requirements  The Raspberry Pi 5 requires a more robust power supply compared to its predecessors, especially if it\u2019s used with peripherals and high-power accessories. The PoE HAT for Raspberry Pi 5 will ensure that the device receives adequate power through the Ethernet connection.</p> </li> <li> <p>Installation  To use PoE with the Raspberry Pi 5, you\u2019ll need:     </p> <ul> <li>A PoE HAT compatible with the Raspberry Pi 5.</li> <li>An Ethernet cable connected to a PoE-enabled switch or injector.</li> <li>The Raspberry Pi 5 itself.</li> </ul> </li> <li> <p>Advantages:</p> <ul> <li>Simplified Cabling: By using PoE, you reduce the number of cables needed, simplifying installation and reducing clutter.</li> <li>Placement Flexibility: PoE enables placing the Raspberry Pi 5 in locations without easy access to power outlets.</li> <li>Centralized Power Management: With PoE, you can manage the power supply for multiple devices from a central location.</li> </ul> </li> <li> <p>Compatibility:</p> <ul> <li>Power Budget: Ensure that your PoE switch or injector can provide sufficient power to all connected devices, including the Raspberry Pi 5.</li> <li>Network Infrastructure: Your network infrastructure should support PoE, typically adhering to IEEE 802.3af (PoE) or IEEE 802.3at (PoE+).</li> </ul> </li> </ol>"},{"location":"Hardware/PoERpi5/#waveshare-poe-hat-f","title":"Waveshare PoE HAT (F)","text":"<p>We have tested Waveshare PoE HAT (F) with Raspbery Pi 5.  Link: https://www.waveshare.com/poe-hat-f.htm</p>"},{"location":"Hardware/PoERpi5/#connection-diagram","title":"Connection Diagram","text":"<p>Connect the PoE_HAT(F) to the Raspberry Pi 5 as shown below: </p>"},{"location":"Hardware/PoERpi5/#parameters","title":"Parameters","text":"<ul> <li>PoE input voltage: 37V-57V DC input</li> <li>PoE - GPIO header: 5V 4.5A (MAX)</li> <li>PoE - 2P header: 12V 2A (MAX)</li> <li>Network standard: Support IEEE 802.3af/at PoE</li> <li>Dimensions: 56.5 \u00d7 70.0mm</li> </ul>"},{"location":"Hardware/PoERpi5/#hat-instalation","title":"HAT Instalation","text":"<p>Install the heatsink as shown below: </p>"},{"location":"Hardware/UPS/","title":"Power Backup Solutions for Raspberry Pi 5 and Raspberry Pi 4","text":""},{"location":"Hardware/UPS/#why-use-power-backup-for-an-ethereum-full-node","title":"Why Use Power Backup for an Ethereum Full Node?","text":"<p>Running a full Ethereum node on Raspberry Pi, especially in projects like Web3 Pi, requires consistent and stable power. A power outage or fluctuation can result in corrupted data since the node continuously writes to storage. In addition, even if you live in a region with seemingly stable electricity, brief voltage dips or surges can occur unnoticed, potentially causing instability, freezing, or unexpected reboots of your Raspberry Pi.</p> <p>For optimal reliability, power backup systems should ideally cover not just the Raspberry Pi but the entire network path (e.g., routers and switches). However, even just powering the Raspberry Pi can significantly enhance stability.</p>"},{"location":"Hardware/UPS/#backup-power-options-for-raspberry-pi","title":"Backup Power Options for Raspberry Pi","text":"<p>There are two primary solutions for providing backup power to Raspberry Pi:</p> <ol> <li>Conventional 230/110V UPS</li> <li>Dedicated UPS for Raspberry Pi SBC</li> </ol>"},{"location":"Hardware/UPS/#conventional-230110v-ups","title":"Conventional 230/110V UPS","text":""},{"location":"Hardware/UPS/#advantages","title":"Advantages:","text":"<ul> <li>Widely available globally in various models and capacities.</li> <li>Can power multiple devices, such as routers, switches, or multiple Raspberry Pis.</li> </ul>"},{"location":"Hardware/UPS/#disadvantages","title":"Disadvantages:","text":"<ul> <li>Larger in size and often equipped with fans, which may produce noise.</li> </ul>"},{"location":"Hardware/UPS/#recommended-model","title":"Recommended Model:","text":"<ul> <li>Legrand UPS KEOR PDU (EAN: 3414971529380) <ul> <li>Silent operation and tested for reliability.  </li> <li>More details.</li> </ul> </li> </ul>"},{"location":"Hardware/UPS/#dedicated-raspberry-pi-ups","title":"Dedicated Raspberry Pi UPS","text":""},{"location":"Hardware/UPS/#advantages_1","title":"Advantages:","text":"<ul> <li>Compact and silent.</li> <li>Designed specifically for Raspberry Pi, often as a HAT or a small external device.</li> <li>Equipped with popular 18650 cells for longer battery life, depending on the number of cells.</li> <li>Can interface with Raspberry Pi to detect low battery levels and initiate safe shutdowns.</li> </ul>"},{"location":"Hardware/UPS/#disadvantages_1","title":"Disadvantages:","text":"<ul> <li>Less commonly available but can be ordered online.</li> </ul>"},{"location":"Hardware/UPS/#recommendations","title":"Recommendations:","text":""},{"location":"Hardware/UPS/#for-raspberry-pi-5","title":"For Raspberry Pi 5:","text":"<ul> <li> <p>Geekworm X1200 2-Cell 18650 5.1V 5A UPS HAT </p> <ul> <li>Designed specifically for Raspberry Pi 5.  </li> <li>Features:<ul> <li>Supports two 18650 batteries for extended runtime.</li> <li>Output: 5.1V/5A for consistent power delivery.</li> <li>Compact HAT form factor, easy to install.  </li> </ul> </li> <li>More information.</li> </ul> </li> <li> <p>Waveshare UPS Module 3S </p> <ul> <li>Features:<ul> <li>Supports three 18650 batteries.</li> <li>Smart power management with low-battery alert.</li> <li>Compact external unit, easy to integrate.  </li> </ul> </li> <li>More information.</li> </ul> </li> </ul>"},{"location":"Hardware/UPS/#for-raspberry-pi-4","title":"For Raspberry Pi 4:","text":"<ul> <li>Geekworm Raspberry Pi X728 <ul> <li>Features:<ul> <li>Supports three 18650 batteries.</li> <li>Integrated power management for safe shutdown.</li> <li>Output: 5V/6A.</li> <li>Compact design that mounts directly onto Raspberry Pi.</li> </ul> </li> <li>More information.</li> </ul> </li> </ul>"},{"location":"Hardware/UPS/#installation-and-setup","title":"Installation and Setup","text":"<p>The installation and configuration processes for these UPS devices are detailed on their respective product pages. Refer to the manufacturer's guides for precise instructions.</p>"},{"location":"Hardware/UPS/#recommendation","title":"Recommendation","text":"<p>We highly recommend using a power backup solution to enhance the stability of your Ethereum node and reduce potential problems caused by power interruptions.</p> <p>For Ethereum Solo Staking, power backup is critical. A reliable power supply minimizes downtime, ensures data integrity, and helps avoid penalties related to missed attestations or blocks.</p>"},{"location":"Hardware/microSD/","title":"microSD","text":"<p>Flashing a microSD card takes time, but it can be reduced by using a fast device. Additionally, using a fast micro SD card results in a shorter booting time. </p> <p>A few examples:</p> <ul> <li>Silicon Power 3D NAND</li> <li>SanDisk Extreme Pro</li> <li>Kingston Canvas React</li> </ul>"},{"location":"Hardware/recommendedHW/","title":"Recommended Hardware","text":""},{"location":"Hardware/recommendedHW/#external-usb-ssd-drive","title":"External USB SSD drive","text":"Brand/Model Comment Link* Samsung T7 2TB USB 3.2 recommended for most userscompatible with Raspberry Pi 4 and 5 https://tweakers.net/ <p>Tip</p> <p>Some external disks consume more power than Raspberry Pi can deliver via USB.  For Raspberry Pi 5 max power output of USB ports is 600mA if using a 3A supply, 1600mA if using a 5A supply.  You can edit /boot/firmware/config.txt and add usb_max_current_enable=1 to disable current limit. This flag is enabled by default in the Web3 Pi image. Please read the documentation: https://www.raspberrypi.com/documentation/computers/raspberry-pi.html</p>"},{"location":"Hardware/recommendedHW/#m2-nvme-drive","title":"m.2 NVMe drive","text":"<p>Those drives need adapters</p> Brand/Model Controller Comment Link* Lexar NM7902TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product pageMore Info Goodram PX7002TB m.2 2280 MaxiotekMAP1602A single side design 4TB available Product page Micron 24002TB m.2 2230 Silicon MotionSM2269XT single side design ~4 W (Max)small 2230 form factorlow power consumptionlow heat Product pageMore Info Samsung 980 Pro2TB m.2 2280 SamsungElpis (S4LV003) single side design 7.2 W (Max) Product pageMore Info Kingston KC30002TB m.2 2280 PhisonPS5018-E18-41 double side design 10.0 W (Max)high performancewide availability Product pageMore Info Crucial P5 Plus2TB m.2 2280 MicronDM02A1 single side design 8.6 W (Max) Product pageMore Info Crucial P32TB m.2 2280 PhisonPS5021-E21T single side design low costwide availability Product pageMore Info Kingston NV22TB m.2 2280 Silicon MotionSM2267XT single side design low costwide availability Product pageMore Info Teamgroup MP44S2TB m.2 2230 PhisonPS5021-E21 single side design small 2230 form factorlow power consumptionlow heat Product pageMore Info <p>Tip</p> <p>Double-sided NVMe M.2 memory modules (with memory chips on both sides of the PCB) may not be fully compatible with every adapter due to physical dimensions, specifically the height of the M.2 slot in the adapter/enclosure.</p>"},{"location":"Hardware/recommendedHW/#nvme-hat-for-raspberry-pi-5","title":"NVMe HAT for Raspberry Pi 5","text":"Brand/Model Comment Link* Pimoroni NVMe Base testedhigh qualitydouble side friendly Product pageShop Raspberry Pi m.2 Hat officialtestedhigh qualitydouble side friendly2230 and 2242 form factorsother form factors can be used,but they require their own mountingand extend beyond the outline Product pageShop Pineboards HatDrive! Bottom testedhigh qualitydouble side friendly2230, 2242, 2280 form factor Product pageShop Pineboards HatDrive! Top testedhigh qualitydouble side friendly2230 and 2242 form factorsother form factors can be used,but they require their own mountingand extend beyond the outline Product pageShop Pineboards HatDrive! Nano testedhigh qualitydouble side friendly2230 and 2242 form factorsother form factors can be used,but they require their own mountingand extend beyond the outline Product pageShop Waveshare 26583 testedhigh qualitydouble side friendly2230 and 2242 form factorsother form factors can be used,but they require their own mountingand extend beyond the outline Product pageShop KAmodRPi5 PCIe-M.2 We do NOT recommend it.We had problems with this adapter. Product page/Shop Geekworm X1001 We do NOT recommend it.The adapter is designed to deliver 1A 5V power.It is not enough for a 2TB NVMe.Poor quality ribbon cable Product page/Shop"},{"location":"Hardware/recommendedHW/#microsd-card","title":"microSD card","text":"<p>Flashing a microSD card takes time, but it can be reduced by using a fast device. Additionally, using a fast micro SD card results in a shorter booting time.  The recommended capacity is 32 or 63 GB.</p> <p>A few examples:</p> Brand/Model Comment Link* SanDisk Extreme Pro Product page Samsung EVO Plus Product page Silicon Power 3D NAND Product page SanDisk Ultra Product page SanDisk MAX ENDURANCE Product page Lexar Professional 1000x"},{"location":"Hardware/recommendedHW/#enclosures-for-raspberry-pi-5","title":"Enclosures for Raspberry Pi 5","text":"Brand/Model Comment Link* Argon NEO 5 M.2 NVMe +good cooling+metal-inconvenient access to the microSD card-m.2 slot not compatible with double side NVMe(easy modification possible with utility knife) Product pageShop Argon NEO 5 +easy acces to microSD card+good cooling+metal Product pageShop Argon ONE V3 M.2 NVMe +good cooling+metal-m.2 slot not compatible with double side NVMe(easy modification possible with utility knife) Product pageShop Argon ONE V3 +good cooling+metal Product pageShop"},{"location":"Hardware/recommendedHW/#enclosures-for-raspberry-pi-4b","title":"Enclosures for Raspberry Pi 4B","text":"Brand/Model Comment Link* Case justPi assembly instructions Product pageShop Argon One V2 Fan control needs additional configurationas described by the manufacturer manual Product pageShop Argon One V2 m.2 Fan control needs additional configurationas described by the manufacturer manual Product pageShop"},{"location":"Hardware/recommendedHW/#usb-to-nvme-adapters","title":"USB to NVMe adapters","text":"Brand Link* ZenWire Product Page RIITOP Product Page QOLTEC Product Page <p>or other similar</p> <p>*Sample links result from a quick Google search mainly for the reader's convenience &amp; quick price reference; we invite you to do your own research and find local hardware providers.</p>"},{"location":"Hardware/storage/","title":"Devices","text":"<p>Different storage configurations are available:</p> <ul> <li>External USB SSD drive (recommended)</li> <li>m.2 NVMe drive with PCIe x1 to m.2 adapter for Rpi 5 (recommended - max. performance)</li> <li>m.2 NVMw drive with USB ro m.2 adapter</li> <li>USB to SATA adapter + SSD 2.5\" drive</li> </ul> <p>List of possible hardware:</p>"},{"location":"Hardware/storage/#external-usb-ssd-drive","title":"External USB SSD drive","text":"Brand Storage Model Link* comment Samsung 2 TB T7 2TB USB 3.2 https://tweakers.net/pricewatch/1560668/samsung-portable-ssd-t7-2tb-grijs/specificaties/ recommended for most users <p>Tip</p> <p>Some external disks consume more power than Raspberry Pi can deliver via USB.  For Raspberry Pi 5 max power output of USB ports is 600mA if using a 3A supply, 1600mA if using a 5A supply.  You can edit /boot/firmware/config.txt and add usb_max_current_enable=1 to disable current limit.  Please read the documentation: https://www.raspberrypi.com/documentation/computers/raspberry-pi.html</p>"},{"location":"Hardware/storage/#m2-nvme-drive","title":"m.2 NVMe drive","text":"<p>Those drives need adapters</p> Brand Model Kingston KC3000 AData XPG Gammix S70 Crucial P5 Plus Samsung 980 Pro <p>Full compatibility list for Ethereum node Full compatibility list for Pimoroni adapter</p>"},{"location":"Hardware/storage/#nvme-hat-for-raspberry-pi-5","title":"NVMe HAT for Raspberry Pi 5","text":"Brand Link* Pimoroni https://shop.pimoroni.com/products/nvme-base?variant=41219587178579 Pineberrypi https://pineberrypi.com/products/hatdrive-bottom-2230-2242-2280-for-rpi5 Waveshare https://www.waveshare.com/product/raspberry-pi/boards-kits/raspberry-pi-5/pcie-to-m.2-board-c.htm"},{"location":"Hardware/storage/#usb-to-nvme-adapters","title":"USB to NVMe adapters","text":"Brand Link* ZenWire https://zenwire.eu/pl/p/Adapter-SSD-M2-NVMESATA-kieszen-na-dysk-obudowa-M.2-USB-C-10-GBs-Zenwire/289 RIITOP https://www.amazon.nl/dp/B0B1HVGBZ3?ref_=pe_28126711_487767311_302_E_DDE_dt_1 QOLTEC https://www.tme.eu/en/details/qoltec-50311/hdd-ssd-accessories/qoltec/50311/ <p>or other similar</p> <p>Some M.2 disks are not compatible. Please check the availability list on Pimoroni NVMe Base description.</p> <p>*Sample links result from a quick Google search mainly for the reader's convenience &amp; quick price reference; we invite you to do your own research and find local hardware providers.</p>"},{"location":"Monitoring/monitoring/","title":"Monitoring","text":"<p>ToDo:</p> <p>Info about:</p> <ul> <li>Grafana</li> <li>InfluxDB</li> <li>BSM</li> <li>BNS</li> </ul>"},{"location":"Plugins/basic-node-monitor/","title":"Basic Ethereum Node Monitor","text":"<p>The Basic Ethereum Node Monitor plugin is responsible for monitoring the health and status of your Ethereum node. That data is then pushed to the InfluxDB database, which can be visualized in Grafana.</p>"},{"location":"Plugins/basic-node-monitor/#installation","title":"Installation","text":"<p>To install the Basic Ethereum Node Monitor plugin, navigate to the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Basic Ethereum Node Monitor\" and install the plugin. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"Plugins/basic-node-monitor/#usage","title":"Usage","text":"<p>Once installed, the Basic Ethereum Node Monitor plugin will start automatically. Open Grafana in your web browser (port 3000 by default) to view the collected data.</p> <p></p>"},{"location":"Plugins/basic-node-monitor/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"Plugins/basic-system-monitor/","title":"Basic System Monitor","text":"<p>The Basic System Monitor plugin is responsible for monitoring the health and status of your Web3 Pi.</p>"},{"location":"Plugins/basic-system-monitor/#installation","title":"Installation","text":"<p>To install the Basic System Monitor plugin, navigate to the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Basic System Monitor\" and install the plugin. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"Plugins/basic-system-monitor/#usage","title":"Usage","text":"<p>Once installed, the Basic System Monitor plugin will start automatically. You can query the status of your Web3 Pi by calling the HTTP API endpoint on port 7197 (by default).</p> <p>The output should look similar to this:</p> <pre><code>{\n  \"host_name\": \"eop-1\",\n  \"num_cores\": 4,\n  \"cpu_percent\": 30,\n  \"mem_total\": 8323276800,\n  \"mem_used\": 6859583488,\n  \"mem_free\": 386887680,\n  \"mem_percent\": 85.4,\n  \"swap_total\": 17179865088,\n  \"swap_used\": 7224090624,\n  \"swap_free\": 9955774464,\n  \"swap_percent\": 42,\n  \"disk_used\": 1359481831424,\n  \"cpu_temp\": 58.95,\n  \"net_upload\": 510982.969251317,\n  \"net_download\": 702530.988724869\n}\n</code></pre>"},{"location":"Plugins/basic-system-monitor/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"Plugins/installation-status/","title":"Installation Status Page","text":"<p>The Installation Status plugin provides a comprehensive overview of the Web3 Pi installation process. It displays the status of each installation stage as well as any errors or warnings encountered during the process.</p>"},{"location":"Plugins/installation-status/#installation","title":"Installation","text":"<p>To install the Installation Status plugin, navigate to the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Installation Status\" and install the plugin. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"Plugins/installation-status/#usage","title":"Usage","text":"<p>Once installed, the Installation Status plugin will be accessible on port 80 of your Raspberry Pi. Simply open the URL in your web browser to view the status page.</p>"},{"location":"Plugins/installation-status/#disabling-the-plugin","title":"Disabling the Plugin","text":"<p>If you no longer require the Installation Status plugin, you can disable it by stopping the <code>w3p_installation-status</code> service. To do this, navigate to the \"Services\" section in the Cockpit interface and stop the service.</p>"},{"location":"Plugins/installation-status/#source-code","title":"Source Code","text":"<p>The source code for the Installation Status plugin can be found on GitHub.</p>"},{"location":"Plugins/installation-status/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"Plugins/lcd-dashboard/","title":"LCD Dashboard","text":"<p>The LCD Dashboard plugin provides a user-friendly interface for monitoring and managing your Web3 Pi. It displays real-time information about your Raspberry Pi's CPU, memory, disk usage, network connections and more.</p>"},{"location":"Plugins/lcd-dashboard/#installation","title":"Installation","text":"<p>To install the LCD Dashboard plugin, navigate to the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"LCD Dashboard\" and install the plugin. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"Plugins/lcd-dashboard/#usage","title":"Usage","text":"<p>Learn more about installing and connecting your Web3 Pi to the LCD Dashboard by visiting the Web3 Pi Dashboard repository.</p>"},{"location":"Plugins/lcd-dashboard/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"Plugins/script-runner/","title":"Script Runner","text":"<p>Script Runner is a Cockpit plugin that provides a user-friendly interface for executing pre-installed scripts on your Web3 Pi. This allows for easy access to common utilities and diagnostic tools directly from the Cockpit web interface.</p>"},{"location":"Plugins/script-runner/#installation","title":"Installation","text":"<p>The Script Runner plugin is installed via the \"Web3 Pi Updater\" section in the Cockpit interface. Search for \"Script Runner\" and install the plugin. Make sure to refresh the page after the installation is complete. On newer Web3 Pi releases, this plugin might be pre-installed by default.</p>"},{"location":"Plugins/script-runner/#usage","title":"Usage","text":"<p>The Script Runner plugin is located in the Cockpit navigation menu. Upon opening, you will see a list of available scripts.</p> <p></p>"},{"location":"Plugins/script-runner/#running-a-script","title":"Running a Script","text":"<ol> <li>Select a Script: Click on the desired script from the list.</li> <li>View Script (Optional): Click on the \"Read File Contents\" button to inspect the script's contents.</li> <li>Run Script: Click the \"Run\" button to execute the script.</li> <li>View Output: The script's output will be displayed in a terminal window within the plugin.</li> </ol>"},{"location":"Plugins/script-runner/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Script Execution Errors: Check the script's output for error messages.</li> <li>Missing Scripts: If a script is missing, ensure your Web3 Pi installation is up-to-date. Navigate to the \"Web3 Pi Updater\" section in the Cockpit interface and search for \"Script Runner\".</li> </ul>"},{"location":"Plugins/script-runner/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"Plugins/web3-pi-link/","title":"Web3 Pi Link","text":"<p>Web3 Pi Link is a Cockpit plugin enabling secure exposure of Raspberry Pi services to the internet. It functions as a reverse proxy tunnel, eliminating the need for manual port forwarding. This document provides technical details for developers using Web3 Pi Link.</p>"},{"location":"Plugins/web3-pi-link/#core-functionality","title":"Core Functionality","text":"<p>Web3 Pi Link establishes a persistent, encrypted tunnel between your Raspberry Pi and a Web3 Pi managed server. This tunnel allows external access to services running on your Pi without direct exposure or complex network configuration. The plugin manages the tunnel lifecycle and provides a simplified configuration interface within Cockpit.</p>"},{"location":"Plugins/web3-pi-link/#key-features","title":"Key Features","text":"<ul> <li>HTTP/WebSocket Proxy: Supports forwarding HTTP and WebSocket traffic from the Raspberry Pi to a public-facing address. Note: Other protocols like SSH are currently not supported.</li> <li>Automatic HTTPS: All tunnels are automatically secured with HTTPS, even if the service on the Raspberry Pi uses HTTP internally.</li> <li>Automatic Reconnection: The plugin automatically re-establishes the tunnel in case of network interruptions.</li> <li>Cockpit Integration: Configuration is managed entirely through the Cockpit web interface.</li> <li>Subdomain Routing: Each service is assigned a unique subdomain (<code>yourname.web3pi.link</code>) for easy access.</li> </ul>"},{"location":"Plugins/web3-pi-link/#technical-architecture","title":"Technical Architecture","text":"<p>The plugin creates a reverse proxy tunnel. When a request arrives at <code>yourname.web3pi.link</code>, it's routed through the Web3 Pi infrastructure, through the secure tunnel to the specified port on your Raspberry Pi. The tunnel client, running on the Raspberry Pi, establishes an outbound connection to the Web3 Pi servers, so there is no need to open any specific ports on your Pi.</p>"},{"location":"Plugins/web3-pi-link/#installation-and-configuration","title":"Installation and Configuration","text":""},{"location":"Plugins/web3-pi-link/#prerequisites","title":"Prerequisites","text":"<ul> <li>A Raspberry Pi with Web3 Pi installed and operational.</li> <li>Cockpit web interface access.</li> <li>Network connectivity allowing outbound connections. Note: No specific firewall rules are required as the connection is initiated from the Raspberry Pi.</li> </ul>"},{"location":"Plugins/web3-pi-link/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Install via Cockpit: Access the Cockpit web interface and navigate to the \"Web3 Pi Updater\" section. Search for \"Web3 Pi Link\" and install the plugin. Make sure to refresh the page after the installation is complete. Newer Web3 Pi versions may have this plugin already installed by default.</p> <p></p> </li> <li> <p>Configuration: The Web3 Pi Link plugin will appear in the Cockpit navigation.</p> <ul> <li>Local Port: Specify the TCP port on your Raspberry Pi that you want to expose (e.g., <code>3000</code>, <code>8545</code>, <code>9090</code>). This is the port your HTTP service is listening on.</li> <li>Subdomain: Choose a unique subdomain name. This will be used to construct the public-facing URL (<code>yourname.web3pi.link</code>). The subdomain must be globally unique. A valid subdomain must begin with a letter or number and can contain lowercase letters, numbers, and hyphens.</li> </ul> </li> </ol> <p></p>"},{"location":"Plugins/web3-pi-link/#troubleshooting-and-debugging","title":"Troubleshooting and Debugging","text":"<ul> <li>Verify Service Status: Check that the Web3 Pi Link service is enabled and running. You can do this by navigating to the \"Services\" section in the Cockpit interface and searching for \"web3-pi-link\".</li> <li>Network Connectivity: Ensure the Raspberry Pi has outbound internet access.</li> <li>HTTPS Issues: While Web3 Pi Link automatically provides HTTPS, ensure your application handles redirects correctly if it expects HTTPS.</li> </ul>"},{"location":"Plugins/web3-pi-link/#security-considerations","title":"Security Considerations","text":"<ul> <li>Secure Your Application: Web3 Pi Link provides a secure tunnel with automatic HTTPS, but it's crucial to secure your application. Implement proper authentication, authorization, and input validation to prevent vulnerabilities.</li> <li>Regular Updates: Make sure to always keep your Web3 Pi software up to date with the latest security patches. You can download the latest updates to each plugin from the \"Web3 Pi Updater\" section in the Cockpit interface.</li> <li>Monitor Logs: Regularly monitor application logs for suspicious activity.</li> </ul>"},{"location":"Plugins/web3-pi-link/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"},{"location":"Plugins/web3-pi-updater/","title":"Web3 Pi Updater","text":"<p>The Web3 Pi Updater plugin provides a centralized interface for managing Web3 Pi packages and essential Ethereum node dependencies. This tool allows you to easily list, update, and install software directly from the Cockpit web interface.</p>"},{"location":"Plugins/web3-pi-updater/#usage","title":"Usage","text":"<p>The Web3 Pi Updater plugin is located in the Cockpit navigation menu.</p> <p></p>"},{"location":"Plugins/web3-pi-updater/#packages-list","title":"Packages List","text":"<p>Packages are separated into two categories: Web3 Pi Official Packages and Ethereum Packages. The former are maintained by the Web3 Pi team and provide additional functionality for your device, while the latter are maintained by their respective developers and are essential for running a node.</p> <p></p>"},{"location":"Plugins/web3-pi-updater/#refresh-packages-list","title":"Refresh Packages List","text":"<p>Web3 Pi packages are distributed from our apt repository. To ensure that your device is up to date with the latest packages, click the Refresh packages list button. This will update the list of available packages and give you the option to install or update them.</p> <p></p> <p>Note</p> <p>The Refresh packages list button has the same effect as running <code>sudo apt update</code> on the command line.</p>"},{"location":"Plugins/web3-pi-updater/#install-or-update-packages","title":"Install or Update Packages","text":"<p>To install a package, click the Install button next to the package name.</p> <p>To update an existing package, click the Update button next to the package name.</p> <p>Note</p> <p>After installing a new cockpit plugin, you may need to refresh your browser tab to see the new plugin in the navigation menu.</p>"},{"location":"Plugins/web3-pi-updater/#notes","title":"Notes","text":"<ul> <li>Package installations and updates may require administrative privileges.</li> <li>Ensure your Web3 Pi has a stable internet connection during package operations.</li> <li>Regularly check for updates to maintain optimal performance and security.</li> </ul>"},{"location":"Plugins/web3-pi-updater/#support","title":"Support","text":"<p>For support and further assistance, join the Web3 Pi Discord community.</p>"}]}